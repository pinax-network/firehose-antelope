// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: sf/antelope/type/v1/type.proto

package pbantelope

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockReversibility int32

const (
	BlockReversibility_BLOCKREVERSIBILITY_NONE         BlockReversibility = 0 // there is no block
	BlockReversibility_BLOCKREVERSIBILITY_REVERSIBLE   BlockReversibility = 1
	BlockReversibility_BLOCKREVERSIBILITY_IRREVERSIBLE BlockReversibility = 2
	BlockReversibility_BLOCKREVERSIBILITY_STALE        BlockReversibility = 3
	BlockReversibility_BLOCKREVERSIBILITY_MAYBESTALE   BlockReversibility = 4 // behind lib, but we have not confirmed irreversibility
)

// Enum value maps for BlockReversibility.
var (
	BlockReversibility_name = map[int32]string{
		0: "BLOCKREVERSIBILITY_NONE",
		1: "BLOCKREVERSIBILITY_REVERSIBLE",
		2: "BLOCKREVERSIBILITY_IRREVERSIBLE",
		3: "BLOCKREVERSIBILITY_STALE",
		4: "BLOCKREVERSIBILITY_MAYBESTALE",
	}
	BlockReversibility_value = map[string]int32{
		"BLOCKREVERSIBILITY_NONE":         0,
		"BLOCKREVERSIBILITY_REVERSIBLE":   1,
		"BLOCKREVERSIBILITY_IRREVERSIBLE": 2,
		"BLOCKREVERSIBILITY_STALE":        3,
		"BLOCKREVERSIBILITY_MAYBESTALE":   4,
	}
)

func (x BlockReversibility) Enum() *BlockReversibility {
	p := new(BlockReversibility)
	*p = x
	return p
}

func (x BlockReversibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockReversibility) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[0].Descriptor()
}

func (BlockReversibility) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[0]
}

func (x BlockReversibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockReversibility.Descriptor instead.
func (BlockReversibility) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{0}
}

type TransactionStatus int32

const (
	TransactionStatus_TRANSACTIONSTATUS_NONE     TransactionStatus = 0
	TransactionStatus_TRANSACTIONSTATUS_EXECUTED TransactionStatus = 1
	TransactionStatus_TRANSACTIONSTATUS_SOFTFAIL TransactionStatus = 2
	TransactionStatus_TRANSACTIONSTATUS_HARDFAIL TransactionStatus = 3
	TransactionStatus_TRANSACTIONSTATUS_DELAYED  TransactionStatus = 4
	TransactionStatus_TRANSACTIONSTATUS_EXPIRED  TransactionStatus = 5
	TransactionStatus_TRANSACTIONSTATUS_UNKNOWN  TransactionStatus = 6
	TransactionStatus_TRANSACTIONSTATUS_CANCELED TransactionStatus = 7
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "TRANSACTIONSTATUS_NONE",
		1: "TRANSACTIONSTATUS_EXECUTED",
		2: "TRANSACTIONSTATUS_SOFTFAIL",
		3: "TRANSACTIONSTATUS_HARDFAIL",
		4: "TRANSACTIONSTATUS_DELAYED",
		5: "TRANSACTIONSTATUS_EXPIRED",
		6: "TRANSACTIONSTATUS_UNKNOWN",
		7: "TRANSACTIONSTATUS_CANCELED",
	}
	TransactionStatus_value = map[string]int32{
		"TRANSACTIONSTATUS_NONE":     0,
		"TRANSACTIONSTATUS_EXECUTED": 1,
		"TRANSACTIONSTATUS_SOFTFAIL": 2,
		"TRANSACTIONSTATUS_HARDFAIL": 3,
		"TRANSACTIONSTATUS_DELAYED":  4,
		"TRANSACTIONSTATUS_EXPIRED":  5,
		"TRANSACTIONSTATUS_UNKNOWN":  6,
		"TRANSACTIONSTATUS_CANCELED": 7,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[1].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[1]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{1}
}

type TrxOp_Operation int32

const (
	TrxOp_OPERATION_UNKNOWN TrxOp_Operation = 0
	TrxOp_OPERATION_CREATE  TrxOp_Operation = 1
)

// Enum value maps for TrxOp_Operation.
var (
	TrxOp_Operation_name = map[int32]string{
		0: "OPERATION_UNKNOWN",
		1: "OPERATION_CREATE",
	}
	TrxOp_Operation_value = map[string]int32{
		"OPERATION_UNKNOWN": 0,
		"OPERATION_CREATE":  1,
	}
)

func (x TrxOp_Operation) Enum() *TrxOp_Operation {
	p := new(TrxOp_Operation)
	*p = x
	return p
}

func (x TrxOp_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrxOp_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[2].Descriptor()
}

func (TrxOp_Operation) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[2]
}

func (x TrxOp_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrxOp_Operation.Descriptor instead.
func (TrxOp_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{35, 0}
}

type DBOp_Operation int32

const (
	DBOp_OPERATION_UNKNOWN DBOp_Operation = 0
	DBOp_OPERATION_INSERT  DBOp_Operation = 1
	DBOp_OPERATION_UPDATE  DBOp_Operation = 2
	DBOp_OPERATION_REMOVE  DBOp_Operation = 3
)

// Enum value maps for DBOp_Operation.
var (
	DBOp_Operation_name = map[int32]string{
		0: "OPERATION_UNKNOWN",
		1: "OPERATION_INSERT",
		2: "OPERATION_UPDATE",
		3: "OPERATION_REMOVE",
	}
	DBOp_Operation_value = map[string]int32{
		"OPERATION_UNKNOWN": 0,
		"OPERATION_INSERT":  1,
		"OPERATION_UPDATE":  2,
		"OPERATION_REMOVE":  3,
	}
)

func (x DBOp_Operation) Enum() *DBOp_Operation {
	p := new(DBOp_Operation)
	*p = x
	return p
}

func (x DBOp_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBOp_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[3].Descriptor()
}

func (DBOp_Operation) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[3]
}

func (x DBOp_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBOp_Operation.Descriptor instead.
func (DBOp_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{36, 0}
}

type RAMOp_Operation int32

const (
	RAMOp_OPERATION_UNKNOWN                                 RAMOp_Operation = 0
	RAMOp_OPERATION_CREATE_TABLE                            RAMOp_Operation = 1
	RAMOp_OPERATION_DEFERRED_TRX_ADD                        RAMOp_Operation = 2
	RAMOp_OPERATION_DEFERRED_TRX_CANCEL                     RAMOp_Operation = 3
	RAMOp_OPERATION_DEFERRED_TRX_PUSHED                     RAMOp_Operation = 4
	RAMOp_OPERATION_DEFERRED_TRX_RAM_CORRECTION             RAMOp_Operation = 5
	RAMOp_OPERATION_DEFERRED_TRX_REMOVED                    RAMOp_Operation = 6
	RAMOp_OPERATION_DELETEAUTH                              RAMOp_Operation = 7
	RAMOp_OPERATION_LINKAUTH                                RAMOp_Operation = 8
	RAMOp_OPERATION_NEWACCOUNT                              RAMOp_Operation = 9
	RAMOp_OPERATION_PRIMARY_INDEX_ADD                       RAMOp_Operation = 10
	RAMOp_OPERATION_PRIMARY_INDEX_REMOVE                    RAMOp_Operation = 11
	RAMOp_OPERATION_PRIMARY_INDEX_UPDATE                    RAMOp_Operation = 12
	RAMOp_OPERATION_PRIMARY_INDEX_UPDATE_ADD_NEW_PAYER      RAMOp_Operation = 13
	RAMOp_OPERATION_PRIMARY_INDEX_UPDATE_REMOVE_OLD_PAYER   RAMOp_Operation = 14
	RAMOp_OPERATION_REMOVE_TABLE                            RAMOp_Operation = 15
	RAMOp_OPERATION_SECONDARY_INDEX_ADD                     RAMOp_Operation = 16
	RAMOp_OPERATION_SECONDARY_INDEX_REMOVE                  RAMOp_Operation = 17
	RAMOp_OPERATION_SECONDARY_INDEX_UPDATE_ADD_NEW_PAYER    RAMOp_Operation = 18
	RAMOp_OPERATION_SECONDARY_INDEX_UPDATE_REMOVE_OLD_PAYER RAMOp_Operation = 19
	RAMOp_OPERATION_SETABI                                  RAMOp_Operation = 20
	RAMOp_OPERATION_SETCODE                                 RAMOp_Operation = 21
	RAMOp_OPERATION_UNLINKAUTH                              RAMOp_Operation = 22
	RAMOp_OPERATION_UPDATEAUTH_CREATE                       RAMOp_Operation = 23
	RAMOp_OPERATION_UPDATEAUTH_UPDATE                       RAMOp_Operation = 24
	// For newer RAM Ops that are registered by Deep Mind, their `Operation` value will be
	// Deprecated until we remove the operation completely. Use instead the `Namespace`
	// and `Action` fields to take a decision about what the RAM operation is doing.
	RAMOp_OPERATION_DEPRECATED RAMOp_Operation = 25
)

// Enum value maps for RAMOp_Operation.
var (
	RAMOp_Operation_name = map[int32]string{
		0:  "OPERATION_UNKNOWN",
		1:  "OPERATION_CREATE_TABLE",
		2:  "OPERATION_DEFERRED_TRX_ADD",
		3:  "OPERATION_DEFERRED_TRX_CANCEL",
		4:  "OPERATION_DEFERRED_TRX_PUSHED",
		5:  "OPERATION_DEFERRED_TRX_RAM_CORRECTION",
		6:  "OPERATION_DEFERRED_TRX_REMOVED",
		7:  "OPERATION_DELETEAUTH",
		8:  "OPERATION_LINKAUTH",
		9:  "OPERATION_NEWACCOUNT",
		10: "OPERATION_PRIMARY_INDEX_ADD",
		11: "OPERATION_PRIMARY_INDEX_REMOVE",
		12: "OPERATION_PRIMARY_INDEX_UPDATE",
		13: "OPERATION_PRIMARY_INDEX_UPDATE_ADD_NEW_PAYER",
		14: "OPERATION_PRIMARY_INDEX_UPDATE_REMOVE_OLD_PAYER",
		15: "OPERATION_REMOVE_TABLE",
		16: "OPERATION_SECONDARY_INDEX_ADD",
		17: "OPERATION_SECONDARY_INDEX_REMOVE",
		18: "OPERATION_SECONDARY_INDEX_UPDATE_ADD_NEW_PAYER",
		19: "OPERATION_SECONDARY_INDEX_UPDATE_REMOVE_OLD_PAYER",
		20: "OPERATION_SETABI",
		21: "OPERATION_SETCODE",
		22: "OPERATION_UNLINKAUTH",
		23: "OPERATION_UPDATEAUTH_CREATE",
		24: "OPERATION_UPDATEAUTH_UPDATE",
		25: "OPERATION_DEPRECATED",
	}
	RAMOp_Operation_value = map[string]int32{
		"OPERATION_UNKNOWN":                                 0,
		"OPERATION_CREATE_TABLE":                            1,
		"OPERATION_DEFERRED_TRX_ADD":                        2,
		"OPERATION_DEFERRED_TRX_CANCEL":                     3,
		"OPERATION_DEFERRED_TRX_PUSHED":                     4,
		"OPERATION_DEFERRED_TRX_RAM_CORRECTION":             5,
		"OPERATION_DEFERRED_TRX_REMOVED":                    6,
		"OPERATION_DELETEAUTH":                              7,
		"OPERATION_LINKAUTH":                                8,
		"OPERATION_NEWACCOUNT":                              9,
		"OPERATION_PRIMARY_INDEX_ADD":                       10,
		"OPERATION_PRIMARY_INDEX_REMOVE":                    11,
		"OPERATION_PRIMARY_INDEX_UPDATE":                    12,
		"OPERATION_PRIMARY_INDEX_UPDATE_ADD_NEW_PAYER":      13,
		"OPERATION_PRIMARY_INDEX_UPDATE_REMOVE_OLD_PAYER":   14,
		"OPERATION_REMOVE_TABLE":                            15,
		"OPERATION_SECONDARY_INDEX_ADD":                     16,
		"OPERATION_SECONDARY_INDEX_REMOVE":                  17,
		"OPERATION_SECONDARY_INDEX_UPDATE_ADD_NEW_PAYER":    18,
		"OPERATION_SECONDARY_INDEX_UPDATE_REMOVE_OLD_PAYER": 19,
		"OPERATION_SETABI":                                  20,
		"OPERATION_SETCODE":                                 21,
		"OPERATION_UNLINKAUTH":                              22,
		"OPERATION_UPDATEAUTH_CREATE":                       23,
		"OPERATION_UPDATEAUTH_UPDATE":                       24,
		"OPERATION_DEPRECATED":                              25,
	}
)

func (x RAMOp_Operation) Enum() *RAMOp_Operation {
	p := new(RAMOp_Operation)
	*p = x
	return p
}

func (x RAMOp_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RAMOp_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[4].Descriptor()
}

func (RAMOp_Operation) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[4]
}

func (x RAMOp_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RAMOp_Operation.Descriptor instead.
func (RAMOp_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{37, 0}
}

type RAMOp_Namespace int32

const (
	RAMOp_NAMESPACE_UNKNOWN         RAMOp_Namespace = 0
	RAMOp_NAMESPACE_ABI             RAMOp_Namespace = 1
	RAMOp_NAMESPACE_ACCOUNT         RAMOp_Namespace = 2
	RAMOp_NAMESPACE_AUTH            RAMOp_Namespace = 3
	RAMOp_NAMESPACE_AUTH_LINK       RAMOp_Namespace = 4
	RAMOp_NAMESPACE_CODE            RAMOp_Namespace = 5
	RAMOp_NAMESPACE_DEFERRED_TRX    RAMOp_Namespace = 6
	RAMOp_NAMESPACE_SECONDARY_INDEX RAMOp_Namespace = 7
	RAMOp_NAMESPACE_TABLE           RAMOp_Namespace = 8
	RAMOp_NAMESPACE_TABLE_ROW       RAMOp_Namespace = 9
)

// Enum value maps for RAMOp_Namespace.
var (
	RAMOp_Namespace_name = map[int32]string{
		0: "NAMESPACE_UNKNOWN",
		1: "NAMESPACE_ABI",
		2: "NAMESPACE_ACCOUNT",
		3: "NAMESPACE_AUTH",
		4: "NAMESPACE_AUTH_LINK",
		5: "NAMESPACE_CODE",
		6: "NAMESPACE_DEFERRED_TRX",
		7: "NAMESPACE_SECONDARY_INDEX",
		8: "NAMESPACE_TABLE",
		9: "NAMESPACE_TABLE_ROW",
	}
	RAMOp_Namespace_value = map[string]int32{
		"NAMESPACE_UNKNOWN":         0,
		"NAMESPACE_ABI":             1,
		"NAMESPACE_ACCOUNT":         2,
		"NAMESPACE_AUTH":            3,
		"NAMESPACE_AUTH_LINK":       4,
		"NAMESPACE_CODE":            5,
		"NAMESPACE_DEFERRED_TRX":    6,
		"NAMESPACE_SECONDARY_INDEX": 7,
		"NAMESPACE_TABLE":           8,
		"NAMESPACE_TABLE_ROW":       9,
	}
)

func (x RAMOp_Namespace) Enum() *RAMOp_Namespace {
	p := new(RAMOp_Namespace)
	*p = x
	return p
}

func (x RAMOp_Namespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RAMOp_Namespace) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[5].Descriptor()
}

func (RAMOp_Namespace) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[5]
}

func (x RAMOp_Namespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RAMOp_Namespace.Descriptor instead.
func (RAMOp_Namespace) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{37, 1}
}

type RAMOp_Action int32

const (
	RAMOp_ACTION_UNKNOWN    RAMOp_Action = 0
	RAMOp_ACTION_ADD        RAMOp_Action = 1
	RAMOp_ACTION_CANCEL     RAMOp_Action = 2
	RAMOp_ACTION_CORRECTION RAMOp_Action = 3
	RAMOp_ACTION_PUSH       RAMOp_Action = 4
	RAMOp_ACTION_REMOVE     RAMOp_Action = 5
	RAMOp_ACTION_UPDATE     RAMOp_Action = 6
)

// Enum value maps for RAMOp_Action.
var (
	RAMOp_Action_name = map[int32]string{
		0: "ACTION_UNKNOWN",
		1: "ACTION_ADD",
		2: "ACTION_CANCEL",
		3: "ACTION_CORRECTION",
		4: "ACTION_PUSH",
		5: "ACTION_REMOVE",
		6: "ACTION_UPDATE",
	}
	RAMOp_Action_value = map[string]int32{
		"ACTION_UNKNOWN":    0,
		"ACTION_ADD":        1,
		"ACTION_CANCEL":     2,
		"ACTION_CORRECTION": 3,
		"ACTION_PUSH":       4,
		"ACTION_REMOVE":     5,
		"ACTION_UPDATE":     6,
	}
)

func (x RAMOp_Action) Enum() *RAMOp_Action {
	p := new(RAMOp_Action)
	*p = x
	return p
}

func (x RAMOp_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RAMOp_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[6].Descriptor()
}

func (RAMOp_Action) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[6]
}

func (x RAMOp_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RAMOp_Action.Descriptor instead.
func (RAMOp_Action) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{37, 2}
}

type TableOp_Operation int32

const (
	TableOp_OPERATION_UNKNOWN TableOp_Operation = 0
	TableOp_OPERATION_INSERT  TableOp_Operation = 1
	TableOp_OPERATION_REMOVE  TableOp_Operation = 2
)

// Enum value maps for TableOp_Operation.
var (
	TableOp_Operation_name = map[int32]string{
		0: "OPERATION_UNKNOWN",
		1: "OPERATION_INSERT",
		2: "OPERATION_REMOVE",
	}
	TableOp_Operation_value = map[string]int32{
		"OPERATION_UNKNOWN": 0,
		"OPERATION_INSERT":  1,
		"OPERATION_REMOVE":  2,
	}
)

func (x TableOp_Operation) Enum() *TableOp_Operation {
	p := new(TableOp_Operation)
	*p = x
	return p
}

func (x TableOp_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableOp_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[7].Descriptor()
}

func (TableOp_Operation) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[7]
}

func (x TableOp_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableOp_Operation.Descriptor instead.
func (TableOp_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{39, 0}
}

type DTrxOp_Operation int32

const (
	DTrxOp_OPERATION_UNKNOWN       DTrxOp_Operation = 0
	DTrxOp_OPERATION_CREATE        DTrxOp_Operation = 1
	DTrxOp_OPERATION_PUSH_CREATE   DTrxOp_Operation = 2
	DTrxOp_OPERATION_FAILED        DTrxOp_Operation = 3
	DTrxOp_OPERATION_CANCEL        DTrxOp_Operation = 4
	DTrxOp_OPERATION_MODIFY_CANCEL DTrxOp_Operation = 5
	DTrxOp_OPERATION_MODIFY_CREATE DTrxOp_Operation = 6
)

// Enum value maps for DTrxOp_Operation.
var (
	DTrxOp_Operation_name = map[int32]string{
		0: "OPERATION_UNKNOWN",
		1: "OPERATION_CREATE",
		2: "OPERATION_PUSH_CREATE",
		3: "OPERATION_FAILED",
		4: "OPERATION_CANCEL",
		5: "OPERATION_MODIFY_CANCEL",
		6: "OPERATION_MODIFY_CREATE",
	}
	DTrxOp_Operation_value = map[string]int32{
		"OPERATION_UNKNOWN":       0,
		"OPERATION_CREATE":        1,
		"OPERATION_PUSH_CREATE":   2,
		"OPERATION_FAILED":        3,
		"OPERATION_CANCEL":        4,
		"OPERATION_MODIFY_CANCEL": 5,
		"OPERATION_MODIFY_CREATE": 6,
	}
)

func (x DTrxOp_Operation) Enum() *DTrxOp_Operation {
	p := new(DTrxOp_Operation)
	*p = x
	return p
}

func (x DTrxOp_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTrxOp_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[8].Descriptor()
}

func (DTrxOp_Operation) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[8]
}

func (x DTrxOp_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTrxOp_Operation.Descriptor instead.
func (DTrxOp_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{40, 0}
}

type FeatureOp_Kind int32

const (
	FeatureOp_KIND_UNKNOWN      FeatureOp_Kind = 0
	FeatureOp_KIND_PRE_ACTIVATE FeatureOp_Kind = 1
	FeatureOp_KIND_ACTIVATE     FeatureOp_Kind = 2
)

// Enum value maps for FeatureOp_Kind.
var (
	FeatureOp_Kind_name = map[int32]string{
		0: "KIND_UNKNOWN",
		1: "KIND_PRE_ACTIVATE",
		2: "KIND_ACTIVATE",
	}
	FeatureOp_Kind_value = map[string]int32{
		"KIND_UNKNOWN":      0,
		"KIND_PRE_ACTIVATE": 1,
		"KIND_ACTIVATE":     2,
	}
)

func (x FeatureOp_Kind) Enum() *FeatureOp_Kind {
	p := new(FeatureOp_Kind)
	*p = x
	return p
}

func (x FeatureOp_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureOp_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[9].Descriptor()
}

func (FeatureOp_Kind) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[9]
}

func (x FeatureOp_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureOp_Kind.Descriptor instead.
func (FeatureOp_Kind) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{42, 0}
}

type PermOp_Operation int32

const (
	PermOp_OPERATION_UNKNOWN PermOp_Operation = 0
	PermOp_OPERATION_INSERT  PermOp_Operation = 1
	PermOp_OPERATION_UPDATE  PermOp_Operation = 2
	PermOp_OPERATION_REMOVE  PermOp_Operation = 3
)

// Enum value maps for PermOp_Operation.
var (
	PermOp_Operation_name = map[int32]string{
		0: "OPERATION_UNKNOWN",
		1: "OPERATION_INSERT",
		2: "OPERATION_UPDATE",
		3: "OPERATION_REMOVE",
	}
	PermOp_Operation_value = map[string]int32{
		"OPERATION_UNKNOWN": 0,
		"OPERATION_INSERT":  1,
		"OPERATION_UPDATE":  2,
		"OPERATION_REMOVE":  3,
	}
)

func (x PermOp_Operation) Enum() *PermOp_Operation {
	p := new(PermOp_Operation)
	*p = x
	return p
}

func (x PermOp_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermOp_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[10].Descriptor()
}

func (PermOp_Operation) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[10]
}

func (x PermOp_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermOp_Operation.Descriptor instead.
func (PermOp_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{44, 0}
}

type RlimitOp_Operation int32

const (
	RlimitOp_OPERATION_UNKNOWN RlimitOp_Operation = 0
	RlimitOp_OPERATION_INSERT  RlimitOp_Operation = 1
	RlimitOp_OPERATION_UPDATE  RlimitOp_Operation = 2
)

// Enum value maps for RlimitOp_Operation.
var (
	RlimitOp_Operation_name = map[int32]string{
		0: "OPERATION_UNKNOWN",
		1: "OPERATION_INSERT",
		2: "OPERATION_UPDATE",
	}
	RlimitOp_Operation_value = map[string]int32{
		"OPERATION_UNKNOWN": 0,
		"OPERATION_INSERT":  1,
		"OPERATION_UPDATE":  2,
	}
)

func (x RlimitOp_Operation) Enum() *RlimitOp_Operation {
	p := new(RlimitOp_Operation)
	*p = x
	return p
}

func (x RlimitOp_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RlimitOp_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_antelope_type_v1_type_proto_enumTypes[11].Descriptor()
}

func (RlimitOp_Operation) Type() protoreflect.EnumType {
	return &file_sf_antelope_type_v1_type_proto_enumTypes[11]
}

func (x RlimitOp_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RlimitOp_Operation.Descriptor instead.
func (RlimitOp_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{52, 0}
}

type ActionTraces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionTraces []*ActionTrace `protobuf:"bytes,1,rep,name=action_traces,json=actionTraces,proto3" json:"action_traces,omitempty"`
}

func (x *ActionTraces) Reset() {
	*x = ActionTraces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionTraces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionTraces) ProtoMessage() {}

func (x *ActionTraces) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionTraces.ProtoReflect.Descriptor instead.
func (*ActionTraces) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{0}
}

func (x *ActionTraces) GetActionTraces() []*ActionTrace {
	if x != nil {
		return x.ActionTraces
	}
	return nil
}

type TransactionTraces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionTraces []*TransactionTrace `protobuf:"bytes,1,rep,name=transaction_traces,json=transactionTraces,proto3" json:"transaction_traces,omitempty"`
}

func (x *TransactionTraces) Reset() {
	*x = TransactionTraces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTraces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTraces) ProtoMessage() {}

func (x *TransactionTraces) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTraces.ProtoReflect.Descriptor instead.
func (*TransactionTraces) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionTraces) GetTransactionTraces() []*TransactionTrace {
	if x != nil {
		return x.TransactionTraces
	}
	return nil
}

type DBOps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbOps []*DBOp `protobuf:"bytes,1,rep,name=db_ops,json=dbOps,proto3" json:"db_ops,omitempty"`
}

func (x *DBOps) Reset() {
	*x = DBOps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBOps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBOps) ProtoMessage() {}

func (x *DBOps) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBOps.ProtoReflect.Descriptor instead.
func (*DBOps) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{2}
}

func (x *DBOps) GetDbOps() []*DBOp {
	if x != nil {
		return x.DbOps
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the block's hash.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Number is the block's height at which this block was mined.
	Number  uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Header contain's the block's header information like its parent hash, the merkel root hash
	// and all other information the form a block.
	Header                           *BlockHeader                `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	ProducerSignature                string                      `protobuf:"bytes,5,opt,name=producer_signature,json=producerSignature,proto3" json:"producer_signature,omitempty"`
	BlockExtensions                  []*Extension                `protobuf:"bytes,7,rep,name=block_extensions,json=blockExtensions,proto3" json:"block_extensions,omitempty"`
	DposProposedIrreversibleBlocknum uint32                      `protobuf:"varint,8,opt,name=dpos_proposed_irreversible_blocknum,json=dposProposedIrreversibleBlocknum,proto3" json:"dpos_proposed_irreversible_blocknum,omitempty"`
	DposIrreversibleBlocknum         uint32                      `protobuf:"varint,9,opt,name=dpos_irreversible_blocknum,json=dposIrreversibleBlocknum,proto3" json:"dpos_irreversible_blocknum,omitempty"`
	BlockrootMerkle                  *BlockRootMerkle            `protobuf:"bytes,11,opt,name=blockroot_merkle,json=blockrootMerkle,proto3" json:"blockroot_merkle,omitempty"`
	ProducerToLastProduced           []*ProducerToLastProduced   `protobuf:"bytes,12,rep,name=producer_to_last_produced,json=producerToLastProduced,proto3" json:"producer_to_last_produced,omitempty"`
	ProducerToLastImpliedIrb         []*ProducerToLastImpliedIRB `protobuf:"bytes,13,rep,name=producer_to_last_implied_irb,json=producerToLastImpliedIrb,proto3" json:"producer_to_last_implied_irb,omitempty"`
	ConfirmCount                     []uint32                    `protobuf:"varint,15,rep,packed,name=confirm_count,json=confirmCount,proto3" json:"confirm_count,omitempty"`
	PendingSchedule                  *PendingProducerSchedule    `protobuf:"bytes,16,opt,name=pending_schedule,json=pendingSchedule,proto3" json:"pending_schedule,omitempty"`
	ActivatedProtocolFeatures        *ActivatedProtocolFeatures  `protobuf:"bytes,17,opt,name=activated_protocol_features,json=activatedProtocolFeatures,proto3" json:"activated_protocol_features,omitempty"`
	RlimitOps                        []*RlimitOp                 `protobuf:"bytes,19,rep,name=rlimit_ops,json=rlimitOps,proto3" json:"rlimit_ops,omitempty"`
	// The unfiltered transactions in this block when NO filtering has been applied,
	// (i.e. `filtering_applied = false`). When filtering has been applied on this block,
	// (i.e. `filtering_applied = true`), this field will be set to `nil` and instead, the
	// `filtered_transactions` will be populated with only filtered transactions.
	//
	// Use the helper getter method `Transactions()` to automatically pick the correct
	// field to use (`unfiltered_transactions` when `filtering_applied == false` and
	// `filtered_transactions` when `filtering_applied == true`).
	UnfilteredTransactions []*TransactionReceipt `protobuf:"bytes,6,rep,name=unfiltered_transactions,json=unfilteredTransactions,proto3" json:"unfiltered_transactions,omitempty"`
	// The filtered transactions in this block when filtering has been applied,
	// (i.e. `filtering_applied = true`). This will be only the transactions
	// that matched the include filter CEL expression and did NOT match the exclude
	// filter CEL expression.
	//
	// Use the helper getter method `Transactions()` to automatically the correct
	// field (`unfiltered_transaction` when `filtering_applied == false` and
	// `filtered_transactions` when `filtering_applied == true`).
	FilteredTransactions []*TransactionReceipt `protobuf:"bytes,47,rep,name=filtered_transactions,json=filteredTransactions,proto3" json:"filtered_transactions,omitempty"`
	// Number of transaction executed within this block when no filtering
	// is applied (`filtering_applied == false`).
	UnfilteredTransactionCount uint32 `protobuf:"varint,22,opt,name=unfiltered_transaction_count,json=unfilteredTransactionCount,proto3" json:"unfiltered_transaction_count,omitempty"`
	// Number of transaction that were successfully executed within this block that are found in
	// the `filtered_transactions` array. This field is populated only when the flag
	// `filtering_applied` is `true`.
	FilteredTransactionCount uint32 `protobuf:"varint,48,opt,name=filtered_transaction_count,json=filteredTransactionCount,proto3" json:"filtered_transaction_count,omitempty"`
	// The unfiltered implicit transaction ops in this block when NO filtering has been applied,
	// (i.e. `filtering_applied = false`). When filtering has been applied on this block,
	// (i.e. `filtering_applied = true`), this field will be set to `nil` and instead, the
	// `filtered_implicit_transaction_ops` will be populated with only filtered implicit
	// transaction ops.
	//
	// Use the helper getter method `ImplicitTransactionOps()` to automatically pick the correct
	// field to use (`unfiltered_implicit_transaction_ops` when `filtering_applied == false` and
	// `filtered_implicit_transaction_ops` when `filtering_applied == true`).
	UnfilteredImplicitTransactionOps []*TrxOp `protobuf:"bytes,20,rep,name=unfiltered_implicit_transaction_ops,json=unfilteredImplicitTransactionOps,proto3" json:"unfiltered_implicit_transaction_ops,omitempty"`
	// The filtered implicit transaction ops in this block when filtering has been applied,
	// (i.e. `filtering_applied = true`). This will be only the implicit transaction ops
	// that matched the include filter CEL expression and did NOT match the exclude
	// filter CEL expression.
	//
	// Use the helper getter method `ImplicitTransactionOps()` to automatically the correct
	// field (`unfiltered_implicit_transaction_ops` when `filtering_applied == false` and
	// `filtered_implicit_transaction_ops` when `filtering_applied == true`).
	FilteredImplicitTransactionOps []*TrxOp `protobuf:"bytes,49,rep,name=filtered_implicit_transaction_ops,json=filteredImplicitTransactionOps,proto3" json:"filtered_implicit_transaction_ops,omitempty"`
	// The unfiltered transaction traces in this block when NO filtering has been applied,
	// (i.e. `filtering_applied = false`). When filtering has been applied on this block,
	// (i.e. `filtering_applied = true`), this field will be set to `nil` and instead, the
	// `filtered_transaction_traces` will be populated with only filtered transactions.
	//
	// Use the helper getter method `TransactionTraces()` to automatically pick the correct
	// field to use (`unfiltered_transaction_traces` when `filtering_applied == false` and
	// `filtered_transaction_traces` when `filtering_applied == true`).
	UnfilteredTransactionTraces []*TransactionTrace `protobuf:"bytes,21,rep,name=unfiltered_transaction_traces,json=unfilteredTransactionTraces,proto3" json:"unfiltered_transaction_traces,omitempty"`
	// The filtered transaction traces in this block when filtering has been applied,
	// (i.e. `filtering_applied = true`). This will be only the transaction trace
	// that matched the include filter CEL expression and did NOT match the exclude
	// filter CEL expression.
	//
	// Use the helper getter method `TransactionTraces()` to automatically pick the correct
	// field to use (`unfiltered_transaction_traces` when `filtering_applied == false` and
	// `filtered_transaction_traces` when `filtering_applied == true`).
	FilteredTransactionTraces []*TransactionTrace `protobuf:"bytes,46,rep,name=filtered_transaction_traces,json=filteredTransactionTraces,proto3" json:"filtered_transaction_traces,omitempty"`
	// Number of transaction trace executed within this block when no filtering
	// is applied (`filtering_applied == false`).
	UnfilteredTransactionTraceCount uint32 `protobuf:"varint,23,opt,name=unfiltered_transaction_trace_count,json=unfilteredTransactionTraceCount,proto3" json:"unfiltered_transaction_trace_count,omitempty"`
	// Number of transaction trace that were successfully executed within this block that are found in
	// the `filtered_transaction_traces` array. This field is populated only when the flag
	// `filtering_applied` is `true`.
	FilteredTransactionTraceCount uint32 `protobuf:"varint,43,opt,name=filtered_transaction_trace_count,json=filteredTransactionTraceCount,proto3" json:"filtered_transaction_trace_count,omitempty"`
	// Number of top-level actions that were successfully executed within this block when no filtering
	// is applied (`filtering_applied == false`).
	UnfilteredExecutedInputActionCount uint32 `protobuf:"varint,24,opt,name=unfiltered_executed_input_action_count,json=unfilteredExecutedInputActionCount,proto3" json:"unfiltered_executed_input_action_count,omitempty"`
	// Number of top-level actions that were successfully executed within this block that are found in
	// the `filtered_transaction_traces` array. This field is populated only when the flag
	// `filtering_applied` is `true`.
	FilteredExecutedInputActionCount uint32 `protobuf:"varint,44,opt,name=filtered_executed_input_action_count,json=filteredExecutedInputActionCount,proto3" json:"filtered_executed_input_action_count,omitempty"`
	// Number of actions that were successfully executed within this block when no filtering
	// is applied (`filtering_applied == false`).
	UnfilteredExecutedTotalActionCount uint32 `protobuf:"varint,25,opt,name=unfiltered_executed_total_action_count,json=unfilteredExecutedTotalActionCount,proto3" json:"unfiltered_executed_total_action_count,omitempty"`
	// Number of actions that were successfully executed within this block that are found in
	// the `filtered_transaction_traces` array. This field is populated only when the flag
	// `filtering_applied` is `true`.
	FilteredExecutedTotalActionCount uint32 `protobuf:"varint,45,opt,name=filtered_executed_total_action_count,json=filteredExecutedTotalActionCount,proto3" json:"filtered_executed_total_action_count,omitempty"`
	// This was a single string element representing a public key (eos-go#ecc.PublicKey).
	// It has been replaced by `valid_block_signing_authority_v2`.
	BlockSigningKey string `protobuf:"bytes,14,opt,name=block_signing_key,json=blockSigningKey,proto3" json:"block_signing_key,omitempty"`
	// This was a list of `{name, publicKey}` elements, each block being signed by a single key,
	// the schedule was simply a list of pair, each pair being the producer name and it's public key
	// used to sign the block.
	ActiveScheduleV1 *ProducerSchedule `protobuf:"bytes,10,opt,name=active_schedule_v1,json=activeScheduleV1,proto3" json:"active_schedule_v1,omitempty"`
	// This replaces `block_signing_key` with a richer structure
	// able to handle the weighted threshold multisig for block producers.
	//
	// This can be downgraded to the old `block_signing_key` simply by taking
	// the first key present in the list. This is of course simple and not
	// accurate anymore in EOSIO 2.0 system where `WTMSIG_BLOCK_SIGNATURES`
	// has been activated AND block producers starts signing blocks with
	// more than one key.
	//
	// See BlockSigningAuthority for further details
	ValidBlockSigningAuthorityV2 *BlockSigningAuthority `protobuf:"bytes,30,opt,name=valid_block_signing_authority_v2,json=validBlockSigningAuthorityV2,proto3" json:"valid_block_signing_authority_v2,omitempty"`
	// This repleaces the old type `ProducerSchedule` for the `active_schedule`
	// field. This was only a type change in EOSIO 2.0, the field's name remained
	// the same.
	//
	// This is the new schedule data layout which is richer than it's oldest
	// counterpart. The inner element for a producer can then be composed with
	// multiple keys, each with their own weight and the threshold required to
	// accept the block signature.
	ActiveScheduleV2 *ProducerAuthoritySchedule `protobuf:"bytes,31,opt,name=active_schedule_v2,json=activeScheduleV2,proto3" json:"active_schedule_v2,omitempty"`
	// Wheter or not a filtering process was run on this block. The filtering process sets to nil
	// the `unfiltered_transaction_traces` to `nil` and populate the `filtered_transaction_traces`
	// according to the `filtering_include_filter_expr` and `filtering_exclude_filter_expr` CEL
	// expressions. A transaction will be present in the `filtered_transaction_traces` array if
	// it matched the `filtering_include_filter_expr` and did *NOT* match the `filtering_exclude_filter_expr`.
	//
	// Moreover, each matching action that brought the transaction to be in `filtered_transaction_traces`
	// array will have a `filtering_matched` flag set on it to broadcast the fact that this action
	// match the inclusion/exclusion list.
	//
	// This flag controls all `filtered_*` and `unfiltered_*` elements on the Block structure and on
	// substructures if present.
	FilteringApplied bool `protobuf:"varint,40,opt,name=filtering_applied,json=filteringApplied,proto3" json:"filtering_applied,omitempty"`
	// The CEL filter expression used to include transaction in `filtered_transaction_traces` array, works
	// in combination with `filtering_exclude_filter_expr` value.
	FilteringIncludeFilterExpr string `protobuf:"bytes,41,opt,name=filtering_include_filter_expr,json=filteringIncludeFilterExpr,proto3" json:"filtering_include_filter_expr,omitempty"`
	// The CEL filter expression used to exclude transaction in `filtered_transaction_traces` array, works
	// in combination with `filtering_include_filter_expr` value.
	FilteringExcludeFilterExpr string `protobuf:"bytes,42,opt,name=filtering_exclude_filter_expr,json=filteringExcludeFilterExpr,proto3" json:"filtering_exclude_filter_expr,omitempty"`
	// The CEL filter expression used to include system actions, required by some systems, works
	// in combination with the two other filters above.
	FilteringSystemActionsIncludeFilterExpr string `protobuf:"bytes,50,opt,name=filtering_system_actions_include_filter_expr,json=filteringSystemActionsIncludeFilterExpr,proto3" json:"filtering_system_actions_include_filter_expr,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{3}
}

func (x *Block) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Block) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Block) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetProducerSignature() string {
	if x != nil {
		return x.ProducerSignature
	}
	return ""
}

func (x *Block) GetBlockExtensions() []*Extension {
	if x != nil {
		return x.BlockExtensions
	}
	return nil
}

func (x *Block) GetDposProposedIrreversibleBlocknum() uint32 {
	if x != nil {
		return x.DposProposedIrreversibleBlocknum
	}
	return 0
}

func (x *Block) GetDposIrreversibleBlocknum() uint32 {
	if x != nil {
		return x.DposIrreversibleBlocknum
	}
	return 0
}

func (x *Block) GetBlockrootMerkle() *BlockRootMerkle {
	if x != nil {
		return x.BlockrootMerkle
	}
	return nil
}

func (x *Block) GetProducerToLastProduced() []*ProducerToLastProduced {
	if x != nil {
		return x.ProducerToLastProduced
	}
	return nil
}

func (x *Block) GetProducerToLastImpliedIrb() []*ProducerToLastImpliedIRB {
	if x != nil {
		return x.ProducerToLastImpliedIrb
	}
	return nil
}

func (x *Block) GetConfirmCount() []uint32 {
	if x != nil {
		return x.ConfirmCount
	}
	return nil
}

func (x *Block) GetPendingSchedule() *PendingProducerSchedule {
	if x != nil {
		return x.PendingSchedule
	}
	return nil
}

func (x *Block) GetActivatedProtocolFeatures() *ActivatedProtocolFeatures {
	if x != nil {
		return x.ActivatedProtocolFeatures
	}
	return nil
}

func (x *Block) GetRlimitOps() []*RlimitOp {
	if x != nil {
		return x.RlimitOps
	}
	return nil
}

func (x *Block) GetUnfilteredTransactions() []*TransactionReceipt {
	if x != nil {
		return x.UnfilteredTransactions
	}
	return nil
}

func (x *Block) GetFilteredTransactions() []*TransactionReceipt {
	if x != nil {
		return x.FilteredTransactions
	}
	return nil
}

func (x *Block) GetUnfilteredTransactionCount() uint32 {
	if x != nil {
		return x.UnfilteredTransactionCount
	}
	return 0
}

func (x *Block) GetFilteredTransactionCount() uint32 {
	if x != nil {
		return x.FilteredTransactionCount
	}
	return 0
}

func (x *Block) GetUnfilteredImplicitTransactionOps() []*TrxOp {
	if x != nil {
		return x.UnfilteredImplicitTransactionOps
	}
	return nil
}

func (x *Block) GetFilteredImplicitTransactionOps() []*TrxOp {
	if x != nil {
		return x.FilteredImplicitTransactionOps
	}
	return nil
}

func (x *Block) GetUnfilteredTransactionTraces() []*TransactionTrace {
	if x != nil {
		return x.UnfilteredTransactionTraces
	}
	return nil
}

func (x *Block) GetFilteredTransactionTraces() []*TransactionTrace {
	if x != nil {
		return x.FilteredTransactionTraces
	}
	return nil
}

func (x *Block) GetUnfilteredTransactionTraceCount() uint32 {
	if x != nil {
		return x.UnfilteredTransactionTraceCount
	}
	return 0
}

func (x *Block) GetFilteredTransactionTraceCount() uint32 {
	if x != nil {
		return x.FilteredTransactionTraceCount
	}
	return 0
}

func (x *Block) GetUnfilteredExecutedInputActionCount() uint32 {
	if x != nil {
		return x.UnfilteredExecutedInputActionCount
	}
	return 0
}

func (x *Block) GetFilteredExecutedInputActionCount() uint32 {
	if x != nil {
		return x.FilteredExecutedInputActionCount
	}
	return 0
}

func (x *Block) GetUnfilteredExecutedTotalActionCount() uint32 {
	if x != nil {
		return x.UnfilteredExecutedTotalActionCount
	}
	return 0
}

func (x *Block) GetFilteredExecutedTotalActionCount() uint32 {
	if x != nil {
		return x.FilteredExecutedTotalActionCount
	}
	return 0
}

func (x *Block) GetBlockSigningKey() string {
	if x != nil {
		return x.BlockSigningKey
	}
	return ""
}

func (x *Block) GetActiveScheduleV1() *ProducerSchedule {
	if x != nil {
		return x.ActiveScheduleV1
	}
	return nil
}

func (x *Block) GetValidBlockSigningAuthorityV2() *BlockSigningAuthority {
	if x != nil {
		return x.ValidBlockSigningAuthorityV2
	}
	return nil
}

func (x *Block) GetActiveScheduleV2() *ProducerAuthoritySchedule {
	if x != nil {
		return x.ActiveScheduleV2
	}
	return nil
}

func (x *Block) GetFilteringApplied() bool {
	if x != nil {
		return x.FilteringApplied
	}
	return false
}

func (x *Block) GetFilteringIncludeFilterExpr() string {
	if x != nil {
		return x.FilteringIncludeFilterExpr
	}
	return ""
}

func (x *Block) GetFilteringExcludeFilterExpr() string {
	if x != nil {
		return x.FilteringExcludeFilterExpr
	}
	return ""
}

func (x *Block) GetFilteringSystemActionsIncludeFilterExpr() string {
	if x != nil {
		return x.FilteringSystemActionsIncludeFilterExpr
	}
	return ""
}

// BlockWithRefs is a lightweight block, with traces and transactions
// purged from the `block` within, and only.  It is used in transports
// to pass block data around.
type BlockWithRefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Block                   *Block           `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	ImplicitTransactionRefs *TransactionRefs `protobuf:"bytes,3,opt,name=implicit_transaction_refs,json=implicitTransactionRefs,proto3" json:"implicit_transaction_refs,omitempty"` // TODO: Triple check that that's the right thing
	TransactionRefs         *TransactionRefs `protobuf:"bytes,4,opt,name=transaction_refs,json=transactionRefs,proto3" json:"transaction_refs,omitempty"`
	TransactionTraceRefs    *TransactionRefs `protobuf:"bytes,5,opt,name=transaction_trace_refs,json=transactionTraceRefs,proto3" json:"transaction_trace_refs,omitempty"`
	Irreversible            bool             `protobuf:"varint,6,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
}

func (x *BlockWithRefs) Reset() {
	*x = BlockWithRefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockWithRefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockWithRefs) ProtoMessage() {}

func (x *BlockWithRefs) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockWithRefs.ProtoReflect.Descriptor instead.
func (*BlockWithRefs) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{4}
}

func (x *BlockWithRefs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockWithRefs) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockWithRefs) GetImplicitTransactionRefs() *TransactionRefs {
	if x != nil {
		return x.ImplicitTransactionRefs
	}
	return nil
}

func (x *BlockWithRefs) GetTransactionRefs() *TransactionRefs {
	if x != nil {
		return x.TransactionRefs
	}
	return nil
}

func (x *BlockWithRefs) GetTransactionTraceRefs() *TransactionRefs {
	if x != nil {
		return x.TransactionTraceRefs
	}
	return nil
}

func (x *BlockWithRefs) GetIrreversible() bool {
	if x != nil {
		return x.Irreversible
	}
	return false
}

type TransactionRefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *TransactionRefs) Reset() {
	*x = TransactionRefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRefs) ProtoMessage() {}

func (x *TransactionRefs) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRefs.ProtoReflect.Descriptor instead.
func (*TransactionRefs) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionRefs) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type ActivatedProtocolFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolFeatures [][]byte `protobuf:"bytes,1,rep,name=protocol_features,json=protocolFeatures,proto3" json:"protocol_features,omitempty"`
}

func (x *ActivatedProtocolFeatures) Reset() {
	*x = ActivatedProtocolFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivatedProtocolFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatedProtocolFeatures) ProtoMessage() {}

func (x *ActivatedProtocolFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatedProtocolFeatures.ProtoReflect.Descriptor instead.
func (*ActivatedProtocolFeatures) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{6}
}

func (x *ActivatedProtocolFeatures) GetProtocolFeatures() [][]byte {
	if x != nil {
		return x.ProtocolFeatures
	}
	return nil
}

type PendingProducerSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleLibNum uint32 `protobuf:"varint,1,opt,name=schedule_lib_num,json=scheduleLibNum,proto3" json:"schedule_lib_num,omitempty"`
	ScheduleHash   []byte `protobuf:"bytes,2,opt,name=schedule_hash,json=scheduleHash,proto3" json:"schedule_hash,omitempty"`
	// See Block#active_schedule_v1 for further details, this is the same change
	// as the active schedule, but applied to the pending field.
	ScheduleV1 *ProducerSchedule `protobuf:"bytes,3,opt,name=schedule_v1,json=scheduleV1,proto3" json:"schedule_v1,omitempty"`
	// See Block#active_schedule_v2 for further details, this is the same change
	// as the active schedule, but applied to the pending field.
	ScheduleV2 *ProducerAuthoritySchedule `protobuf:"bytes,4,opt,name=schedule_v2,json=scheduleV2,proto3" json:"schedule_v2,omitempty"`
}

func (x *PendingProducerSchedule) Reset() {
	*x = PendingProducerSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingProducerSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingProducerSchedule) ProtoMessage() {}

func (x *PendingProducerSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingProducerSchedule.ProtoReflect.Descriptor instead.
func (*PendingProducerSchedule) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{7}
}

func (x *PendingProducerSchedule) GetScheduleLibNum() uint32 {
	if x != nil {
		return x.ScheduleLibNum
	}
	return 0
}

func (x *PendingProducerSchedule) GetScheduleHash() []byte {
	if x != nil {
		return x.ScheduleHash
	}
	return nil
}

func (x *PendingProducerSchedule) GetScheduleV1() *ProducerSchedule {
	if x != nil {
		return x.ScheduleV1
	}
	return nil
}

func (x *PendingProducerSchedule) GetScheduleV2() *ProducerAuthoritySchedule {
	if x != nil {
		return x.ScheduleV2
	}
	return nil
}

// Present in EOSIO 1.x only
type ProducerSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   uint32         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Producers []*ProducerKey `protobuf:"bytes,2,rep,name=producers,proto3" json:"producers,omitempty"`
}

func (x *ProducerSchedule) Reset() {
	*x = ProducerSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerSchedule) ProtoMessage() {}

func (x *ProducerSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerSchedule.ProtoReflect.Descriptor instead.
func (*ProducerSchedule) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{8}
}

func (x *ProducerSchedule) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProducerSchedule) GetProducers() []*ProducerKey {
	if x != nil {
		return x.Producers
	}
	return nil
}

// Present in EOSIO 1.x only
type ProducerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName     string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	BlockSigningKey string `protobuf:"bytes,2,opt,name=block_signing_key,json=blockSigningKey,proto3" json:"block_signing_key,omitempty"`
}

func (x *ProducerKey) Reset() {
	*x = ProducerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerKey) ProtoMessage() {}

func (x *ProducerKey) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerKey.ProtoReflect.Descriptor instead.
func (*ProducerKey) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{9}
}

func (x *ProducerKey) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ProducerKey) GetBlockSigningKey() string {
	if x != nil {
		return x.BlockSigningKey
	}
	return ""
}

// Present in EOSIO 2.x only
//
// This is the new schedule data layout which is richer than it's oldest
// counterpart. The inner element for a producer can then be composed with
// multiple keys, each with their own weight and the threshold required to
// accept the block signature.
type ProducerAuthoritySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   uint32               `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Producers []*ProducerAuthority `protobuf:"bytes,2,rep,name=producers,proto3" json:"producers,omitempty"`
}

func (x *ProducerAuthoritySchedule) Reset() {
	*x = ProducerAuthoritySchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerAuthoritySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerAuthoritySchedule) ProtoMessage() {}

func (x *ProducerAuthoritySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerAuthoritySchedule.ProtoReflect.Descriptor instead.
func (*ProducerAuthoritySchedule) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{10}
}

func (x *ProducerAuthoritySchedule) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProducerAuthoritySchedule) GetProducers() []*ProducerAuthority {
	if x != nil {
		return x.Producers
	}
	return nil
}

// Present in EOSIO 2.x only
type ProducerAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName           string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	BlockSigningAuthority *BlockSigningAuthority `protobuf:"bytes,2,opt,name=block_signing_authority,json=blockSigningAuthority,proto3" json:"block_signing_authority,omitempty"`
}

func (x *ProducerAuthority) Reset() {
	*x = ProducerAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerAuthority) ProtoMessage() {}

func (x *ProducerAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerAuthority.ProtoReflect.Descriptor instead.
func (*ProducerAuthority) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{11}
}

func (x *ProducerAuthority) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ProducerAuthority) GetBlockSigningAuthority() *BlockSigningAuthority {
	if x != nil {
		return x.BlockSigningAuthority
	}
	return nil
}

// Present in EOSIO 2.x only
//
// This represents the signatures that were used to signed the block. Previously,
// in EOSIO 1.x, this was a simple public key since only one key could sign a block.
// In EOSIO 2.x, when `WTMSIG_BLOCK_SIGNATURES` feature is active, the block can be
// signed with a set of different public keys, each with its own weight as well as
// the threshold at which point the signatures are accepted.
//
// This is actually implemented as a `fc::variant` type in the C++ code, this tainted
// our own implementation where multiple types can be represented using a `oneof`.
//
// Know current types (and version they were introduced):
// - `BlockSigningAuthorityV0` [Type 0] (EOSIO 2.0)
type BlockSigningAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*BlockSigningAuthority_V0
	Variant isBlockSigningAuthority_Variant `protobuf_oneof:"variant"`
}

func (x *BlockSigningAuthority) Reset() {
	*x = BlockSigningAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSigningAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSigningAuthority) ProtoMessage() {}

func (x *BlockSigningAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSigningAuthority.ProtoReflect.Descriptor instead.
func (*BlockSigningAuthority) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{12}
}

func (m *BlockSigningAuthority) GetVariant() isBlockSigningAuthority_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *BlockSigningAuthority) GetV0() *BlockSigningAuthorityV0 {
	if x, ok := x.GetVariant().(*BlockSigningAuthority_V0); ok {
		return x.V0
	}
	return nil
}

type isBlockSigningAuthority_Variant interface {
	isBlockSigningAuthority_Variant()
}

type BlockSigningAuthority_V0 struct {
	V0 *BlockSigningAuthorityV0 `protobuf:"bytes,1,opt,name=v0,proto3,oneof"`
}

func (*BlockSigningAuthority_V0) isBlockSigningAuthority_Variant() {}

// Present in EOSIO 2.x only
type BlockSigningAuthorityV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold uint32       `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Keys      []*KeyWeight `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *BlockSigningAuthorityV0) Reset() {
	*x = BlockSigningAuthorityV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSigningAuthorityV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSigningAuthorityV0) ProtoMessage() {}

func (x *BlockSigningAuthorityV0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSigningAuthorityV0.ProtoReflect.Descriptor instead.
func (*BlockSigningAuthorityV0) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{13}
}

func (x *BlockSigningAuthorityV0) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *BlockSigningAuthorityV0) GetKeys() []*KeyWeight {
	if x != nil {
		return x.Keys
	}
	return nil
}

type BlockRootMerkle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeCount   uint32   `protobuf:"varint,1,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	ActiveNodes [][]byte `protobuf:"bytes,2,rep,name=active_nodes,json=activeNodes,proto3" json:"active_nodes,omitempty"`
}

func (x *BlockRootMerkle) Reset() {
	*x = BlockRootMerkle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRootMerkle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRootMerkle) ProtoMessage() {}

func (x *BlockRootMerkle) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRootMerkle.ProtoReflect.Descriptor instead.
func (*BlockRootMerkle) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{14}
}

func (x *BlockRootMerkle) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *BlockRootMerkle) GetActiveNodes() [][]byte {
	if x != nil {
		return x.ActiveNodes
	}
	return nil
}

type ProducerToLastProduced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LastBlockNumProduced uint32 `protobuf:"varint,2,opt,name=last_block_num_produced,json=lastBlockNumProduced,proto3" json:"last_block_num_produced,omitempty"`
}

func (x *ProducerToLastProduced) Reset() {
	*x = ProducerToLastProduced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerToLastProduced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerToLastProduced) ProtoMessage() {}

func (x *ProducerToLastProduced) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerToLastProduced.ProtoReflect.Descriptor instead.
func (*ProducerToLastProduced) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{15}
}

func (x *ProducerToLastProduced) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProducerToLastProduced) GetLastBlockNumProduced() uint32 {
	if x != nil {
		return x.LastBlockNumProduced
	}
	return 0
}

type ProducerToLastImpliedIRB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LastBlockNumProduced uint32 `protobuf:"varint,2,opt,name=last_block_num_produced,json=lastBlockNumProduced,proto3" json:"last_block_num_produced,omitempty"`
}

func (x *ProducerToLastImpliedIRB) Reset() {
	*x = ProducerToLastImpliedIRB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProducerToLastImpliedIRB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerToLastImpliedIRB) ProtoMessage() {}

func (x *ProducerToLastImpliedIRB) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerToLastImpliedIRB.ProtoReflect.Descriptor instead.
func (*ProducerToLastImpliedIRB) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{16}
}

func (x *ProducerToLastImpliedIRB) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProducerToLastImpliedIRB) GetLastBlockNumProduced() uint32 {
	if x != nil {
		return x.LastBlockNumProduced
	}
	return 0
}

type TransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Index                uint64             `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"` // within the SignedBlock
	Status               TransactionStatus  `protobuf:"varint,1,opt,name=status,proto3,enum=sf.antelope.type.v1.TransactionStatus" json:"status,omitempty"`
	CpuUsageMicroSeconds uint32             `protobuf:"varint,2,opt,name=cpu_usage_micro_seconds,json=cpuUsageMicroSeconds,proto3" json:"cpu_usage_micro_seconds,omitempty"`
	NetUsageWords        uint32             `protobuf:"varint,3,opt,name=net_usage_words,json=netUsageWords,proto3" json:"net_usage_words,omitempty"`
	PackedTransaction    *PackedTransaction `protobuf:"bytes,5,opt,name=packed_transaction,json=packedTransaction,proto3" json:"packed_transaction,omitempty"` // present if not deferred
}

func (x *TransactionReceipt) Reset() {
	*x = TransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceipt) ProtoMessage() {}

func (x *TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceipt.ProtoReflect.Descriptor instead.
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{17}
}

func (x *TransactionReceipt) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionReceipt) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransactionReceipt) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTIONSTATUS_NONE
}

func (x *TransactionReceipt) GetCpuUsageMicroSeconds() uint32 {
	if x != nil {
		return x.CpuUsageMicroSeconds
	}
	return 0
}

func (x *TransactionReceipt) GetNetUsageWords() uint32 {
	if x != nil {
		return x.NetUsageWords
	}
	return 0
}

func (x *TransactionReceipt) GetPackedTransaction() *PackedTransaction {
	if x != nil {
		return x.PackedTransaction
	}
	return nil
}

type PackedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures            []string `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Compression           uint32   `protobuf:"varint,2,opt,name=compression,proto3" json:"compression,omitempty"`
	PackedContextFreeData []byte   `protobuf:"bytes,3,opt,name=packed_context_free_data,json=packedContextFreeData,proto3" json:"packed_context_free_data,omitempty"`
	PackedTransaction     []byte   `protobuf:"bytes,4,opt,name=packed_transaction,json=packedTransaction,proto3" json:"packed_transaction,omitempty"`
}

func (x *PackedTransaction) Reset() {
	*x = PackedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedTransaction) ProtoMessage() {}

func (x *PackedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedTransaction.ProtoReflect.Descriptor instead.
func (*PackedTransaction) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{18}
}

func (x *PackedTransaction) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *PackedTransaction) GetCompression() uint32 {
	if x != nil {
		return x.Compression
	}
	return 0
}

func (x *PackedTransaction) GetPackedContextFreeData() []byte {
	if x != nil {
		return x.PackedContextFreeData
	}
	return nil
}

func (x *PackedTransaction) GetPackedTransaction() []byte {
	if x != nil {
		return x.PackedTransaction
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Producer         string                 `protobuf:"bytes,4,opt,name=producer,proto3" json:"producer,omitempty"`
	Confirmed        uint32                 `protobuf:"varint,5,opt,name=confirmed,proto3" json:"confirmed,omitempty"` // uint16
	Previous         string                 `protobuf:"bytes,6,opt,name=previous,proto3" json:"previous,omitempty"`
	TransactionMroot []byte                 `protobuf:"bytes,7,opt,name=transaction_mroot,json=transactionMroot,proto3" json:"transaction_mroot,omitempty"`
	ActionMroot      []byte                 `protobuf:"bytes,8,opt,name=action_mroot,json=actionMroot,proto3" json:"action_mroot,omitempty"`
	ScheduleVersion  uint32                 `protobuf:"varint,9,opt,name=schedule_version,json=scheduleVersion,proto3" json:"schedule_version,omitempty"`
	HeaderExtensions []*Extension           `protobuf:"bytes,11,rep,name=header_extensions,json=headerExtensions,proto3" json:"header_extensions,omitempty"`
	// EOSIO 1.x only
	//
	// A change to producer schedule was reported as a `NewProducers` field on the
	// `BlockHeader` in EOSIO 1.x. In EOSIO 2.x, when feature `WTMSIG_BLOCK_SIGNATURES`
	// is activated, the `NewProducers` field is not present anymore and the schedule change
	// is reported through a `BlockHeaderExtension` on the the `BlockHeader` struct.
	//
	// If you need to access the old value, you can
	NewProducersV1 *ProducerSchedule `protobuf:"bytes,10,opt,name=new_producers_v1,json=newProducersV1,proto3" json:"new_producers_v1,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{19}
}

func (x *BlockHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BlockHeader) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *BlockHeader) GetConfirmed() uint32 {
	if x != nil {
		return x.Confirmed
	}
	return 0
}

func (x *BlockHeader) GetPrevious() string {
	if x != nil {
		return x.Previous
	}
	return ""
}

func (x *BlockHeader) GetTransactionMroot() []byte {
	if x != nil {
		return x.TransactionMroot
	}
	return nil
}

func (x *BlockHeader) GetActionMroot() []byte {
	if x != nil {
		return x.ActionMroot
	}
	return nil
}

func (x *BlockHeader) GetScheduleVersion() uint32 {
	if x != nil {
		return x.ScheduleVersion
	}
	return 0
}

func (x *BlockHeader) GetHeaderExtensions() []*Extension {
	if x != nil {
		return x.HeaderExtensions
	}
	return nil
}

func (x *BlockHeader) GetNewProducersV1() *ProducerSchedule {
	if x != nil {
		return x.NewProducersV1
	}
	return nil
}

// TransactionEvent are elements that contribute to a view of the
// whole transaction lifecycle. They can be extracted from block logs,
// or from storage, and merged together to form an up-to-date
// TransactionLifecycle.
type TransactionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockId      string `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockNum     uint32 `protobuf:"varint,3,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	Irreversible bool   `protobuf:"varint,4,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
	// Types that are assignable to Event:
	//
	//	*TransactionEvent_InternalAddition
	//	*TransactionEvent_Addition
	//	*TransactionEvent_Execution
	//	*TransactionEvent_DtrxScheduling
	//	*TransactionEvent_DtrxCancellation
	Event isTransactionEvent_Event `protobuf_oneof:"event"`
}

func (x *TransactionEvent) Reset() {
	*x = TransactionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEvent) ProtoMessage() {}

func (x *TransactionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEvent.ProtoReflect.Descriptor instead.
func (*TransactionEvent) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{20}
}

func (x *TransactionEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionEvent) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *TransactionEvent) GetBlockNum() uint32 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *TransactionEvent) GetIrreversible() bool {
	if x != nil {
		return x.Irreversible
	}
	return false
}

func (m *TransactionEvent) GetEvent() isTransactionEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *TransactionEvent) GetInternalAddition() *TransactionEvent_AddedInternally {
	if x, ok := x.GetEvent().(*TransactionEvent_InternalAddition); ok {
		return x.InternalAddition
	}
	return nil
}

func (x *TransactionEvent) GetAddition() *TransactionEvent_Added {
	if x, ok := x.GetEvent().(*TransactionEvent_Addition); ok {
		return x.Addition
	}
	return nil
}

func (x *TransactionEvent) GetExecution() *TransactionEvent_Executed {
	if x, ok := x.GetEvent().(*TransactionEvent_Execution); ok {
		return x.Execution
	}
	return nil
}

func (x *TransactionEvent) GetDtrxScheduling() *TransactionEvent_DtrxScheduled {
	if x, ok := x.GetEvent().(*TransactionEvent_DtrxScheduling); ok {
		return x.DtrxScheduling
	}
	return nil
}

func (x *TransactionEvent) GetDtrxCancellation() *TransactionEvent_DtrxCanceled {
	if x, ok := x.GetEvent().(*TransactionEvent_DtrxCancellation); ok {
		return x.DtrxCancellation
	}
	return nil
}

type isTransactionEvent_Event interface {
	isTransactionEvent_Event()
}

type TransactionEvent_InternalAddition struct {
	InternalAddition *TransactionEvent_AddedInternally `protobuf:"bytes,5,opt,name=internal_addition,json=internalAddition,proto3,oneof"`
}

type TransactionEvent_Addition struct {
	Addition *TransactionEvent_Added `protobuf:"bytes,6,opt,name=addition,proto3,oneof"`
}

type TransactionEvent_Execution struct {
	Execution *TransactionEvent_Executed `protobuf:"bytes,7,opt,name=execution,proto3,oneof"`
}

type TransactionEvent_DtrxScheduling struct {
	DtrxScheduling *TransactionEvent_DtrxScheduled `protobuf:"bytes,8,opt,name=dtrx_scheduling,json=dtrxScheduling,proto3,oneof"`
}

type TransactionEvent_DtrxCancellation struct {
	DtrxCancellation *TransactionEvent_DtrxCanceled `protobuf:"bytes,9,opt,name=dtrx_cancellation,json=dtrxCancellation,proto3,oneof"`
}

func (*TransactionEvent_InternalAddition) isTransactionEvent_Event() {}

func (*TransactionEvent_Addition) isTransactionEvent_Event() {}

func (*TransactionEvent_Execution) isTransactionEvent_Event() {}

func (*TransactionEvent_DtrxScheduling) isTransactionEvent_Event() {}

func (*TransactionEvent_DtrxCancellation) isTransactionEvent_Event() {}

type PublicKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeys []string `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
}

func (x *PublicKeys) Reset() {
	*x = PublicKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeys) ProtoMessage() {}

func (x *PublicKeys) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeys.ProtoReflect.Descriptor instead.
func (*PublicKeys) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{21}
}

func (x *PublicKeys) GetPublicKeys() []string {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type TransactionLifecycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TransactionStatus       TransactionStatus   `protobuf:"varint,2,opt,name=transaction_status,json=transactionStatus,proto3,enum=sf.antelope.type.v1.TransactionStatus" json:"transaction_status,omitempty"`
	TransactionReceipt      *TransactionReceipt `protobuf:"bytes,36,opt,name=transaction_receipt,json=transactionReceipt,proto3" json:"transaction_receipt,omitempty"` // FIXME: this is currently missing from our data
	Transaction             *SignedTransaction  `protobuf:"bytes,10,opt,name=transaction,proto3" json:"transaction,omitempty"`
	PublicKeys              []string            `protobuf:"bytes,19,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	ExecutionTrace          *TransactionTrace   `protobuf:"bytes,11,opt,name=execution_trace,json=executionTrace,proto3" json:"execution_trace,omitempty"`
	ExecutionBlockHeader    *BlockHeader        `protobuf:"bytes,12,opt,name=execution_block_header,json=executionBlockHeader,proto3" json:"execution_block_header,omitempty"`
	CreatedBy               *ExtDTrxOp          `protobuf:"bytes,20,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CanceledBy              *ExtDTrxOp          `protobuf:"bytes,21,opt,name=canceled_by,json=canceledBy,proto3" json:"canceled_by,omitempty"`
	CreationIrreversible    bool                `protobuf:"varint,33,opt,name=creation_irreversible,json=creationIrreversible,proto3" json:"creation_irreversible,omitempty"`
	ExecutionIrreversible   bool                `protobuf:"varint,34,opt,name=execution_irreversible,json=executionIrreversible,proto3" json:"execution_irreversible,omitempty"`
	CancelationIrreversible bool                `protobuf:"varint,35,opt,name=cancelation_irreversible,json=cancelationIrreversible,proto3" json:"cancelation_irreversible,omitempty"`
}

func (x *TransactionLifecycle) Reset() {
	*x = TransactionLifecycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionLifecycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionLifecycle) ProtoMessage() {}

func (x *TransactionLifecycle) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionLifecycle.ProtoReflect.Descriptor instead.
func (*TransactionLifecycle) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{22}
}

func (x *TransactionLifecycle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionLifecycle) GetTransactionStatus() TransactionStatus {
	if x != nil {
		return x.TransactionStatus
	}
	return TransactionStatus_TRANSACTIONSTATUS_NONE
}

func (x *TransactionLifecycle) GetTransactionReceipt() *TransactionReceipt {
	if x != nil {
		return x.TransactionReceipt
	}
	return nil
}

func (x *TransactionLifecycle) GetTransaction() *SignedTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionLifecycle) GetPublicKeys() []string {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *TransactionLifecycle) GetExecutionTrace() *TransactionTrace {
	if x != nil {
		return x.ExecutionTrace
	}
	return nil
}

func (x *TransactionLifecycle) GetExecutionBlockHeader() *BlockHeader {
	if x != nil {
		return x.ExecutionBlockHeader
	}
	return nil
}

func (x *TransactionLifecycle) GetCreatedBy() *ExtDTrxOp {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *TransactionLifecycle) GetCanceledBy() *ExtDTrxOp {
	if x != nil {
		return x.CanceledBy
	}
	return nil
}

func (x *TransactionLifecycle) GetCreationIrreversible() bool {
	if x != nil {
		return x.CreationIrreversible
	}
	return false
}

func (x *TransactionLifecycle) GetExecutionIrreversible() bool {
	if x != nil {
		return x.ExecutionIrreversible
	}
	return false
}

func (x *TransactionLifecycle) GetCancelationIrreversible() bool {
	if x != nil {
		return x.CancelationIrreversible
	}
	return false
}

type SignedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction     *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Signatures      []string     `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	ContextFreeData [][]byte     `protobuf:"bytes,3,rep,name=context_free_data,json=contextFreeData,proto3" json:"context_free_data,omitempty"`
}

func (x *SignedTransaction) Reset() {
	*x = SignedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTransaction) ProtoMessage() {}

func (x *SignedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTransaction.ProtoReflect.Descriptor instead.
func (*SignedTransaction) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{23}
}

func (x *SignedTransaction) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SignedTransaction) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignedTransaction) GetContextFreeData() [][]byte {
	if x != nil {
		return x.ContextFreeData
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *TransactionHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ContextFreeActions []*Action          `protobuf:"bytes,2,rep,name=context_free_actions,json=contextFreeActions,proto3" json:"context_free_actions,omitempty"`
	Actions            []*Action          `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	Extensions         []*Extension       `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{24}
}

func (x *Transaction) GetHeader() *TransactionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Transaction) GetContextFreeActions() []*Action {
	if x != nil {
		return x.ContextFreeActions
	}
	return nil
}

func (x *Transaction) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Transaction) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type TransactionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	RefBlockNum      uint32                 `protobuf:"varint,2,opt,name=ref_block_num,json=refBlockNum,proto3" json:"ref_block_num,omitempty"`
	RefBlockPrefix   uint32                 `protobuf:"varint,3,opt,name=ref_block_prefix,json=refBlockPrefix,proto3" json:"ref_block_prefix,omitempty"`
	MaxNetUsageWords uint32                 `protobuf:"varint,4,opt,name=max_net_usage_words,json=maxNetUsageWords,proto3" json:"max_net_usage_words,omitempty"`
	MaxCpuUsageMs    uint32                 `protobuf:"varint,5,opt,name=max_cpu_usage_ms,json=maxCpuUsageMs,proto3" json:"max_cpu_usage_ms,omitempty"`
	DelaySec         uint32                 `protobuf:"varint,6,opt,name=delay_sec,json=delaySec,proto3" json:"delay_sec,omitempty"`
}

func (x *TransactionHeader) Reset() {
	*x = TransactionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHeader) ProtoMessage() {}

func (x *TransactionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHeader.ProtoReflect.Descriptor instead.
func (*TransactionHeader) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionHeader) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *TransactionHeader) GetRefBlockNum() uint32 {
	if x != nil {
		return x.RefBlockNum
	}
	return 0
}

func (x *TransactionHeader) GetRefBlockPrefix() uint32 {
	if x != nil {
		return x.RefBlockPrefix
	}
	return 0
}

func (x *TransactionHeader) GetMaxNetUsageWords() uint32 {
	if x != nil {
		return x.MaxNetUsageWords
	}
	return 0
}

func (x *TransactionHeader) GetMaxCpuUsageMs() uint32 {
	if x != nil {
		return x.MaxCpuUsageMs
	}
	return 0
}

func (x *TransactionHeader) GetDelaySec() uint32 {
	if x != nil {
		return x.DelaySec
	}
	return 0
}

type TransactionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SHA-256 (FIPS 180-4) of the FCBUFFER-encoded packed transaction
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Reference to the block number in which this transaction was executed.
	BlockNum uint64 `protobuf:"varint,2,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	// Index within block's unfiltered execution traces
	Index uint64 `protobuf:"varint,26,opt,name=index,proto3" json:"index,omitempty"`
	// Reference to the block time this transaction was executed in
	BlockTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// Reference to the block ID this transaction was executed in
	ProducerBlockId string `protobuf:"bytes,4,opt,name=producer_block_id,json=producerBlockId,proto3" json:"producer_block_id,omitempty"`
	// Receipt of execution of this transaction
	Receipt  *TransactionReceiptHeader `protobuf:"bytes,5,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Elapsed  int64                     `protobuf:"varint,6,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	NetUsage uint64                    `protobuf:"varint,7,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	// Whether this transaction was taken from a scheduled transactions pool for
	// execution (delayed)
	Scheduled bool `protobuf:"varint,8,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// Traces of each action within the transaction, including all notified and
	// nested actions.
	ActionTraces []*ActionTrace `protobuf:"bytes,9,rep,name=action_traces,json=actionTraces,proto3" json:"action_traces,omitempty"`
	// Trace of a failed deferred transaction, if any.
	FailedDtrxTrace *TransactionTrace `protobuf:"bytes,10,opt,name=failed_dtrx_trace,json=failedDtrxTrace,proto3" json:"failed_dtrx_trace,omitempty"`
	// Exception leading to the failed dtrx trace.
	Exception *Exception `protobuf:"bytes,15,opt,name=exception,proto3" json:"exception,omitempty"`
	ErrorCode uint64     `protobuf:"varint,16,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// List of database operations this transaction entailed
	DbOps []*DBOp `protobuf:"bytes,17,rep,name=db_ops,json=dbOps,proto3" json:"db_ops,omitempty"`
	// List of deferred transactions operations this transaction entailed
	DtrxOps []*DTrxOp `protobuf:"bytes,18,rep,name=dtrx_ops,json=dtrxOps,proto3" json:"dtrx_ops,omitempty"`
	// List of feature switching operations (changes to feature switches in
	// nodeos) this transaction entailed
	FeatureOps []*FeatureOp `protobuf:"bytes,19,rep,name=feature_ops,json=featureOps,proto3" json:"feature_ops,omitempty"`
	// List of permission changes operations
	PermOps []*PermOp `protobuf:"bytes,20,rep,name=perm_ops,json=permOps,proto3" json:"perm_ops,omitempty"`
	// List of RAM consumption/redemption
	RamOps []*RAMOp `protobuf:"bytes,21,rep,name=ram_ops,json=ramOps,proto3" json:"ram_ops,omitempty"`
	// List of RAM correction operations (happens only once upon feature
	// activation)
	RamCorrectionOps []*RAMCorrectionOp `protobuf:"bytes,22,rep,name=ram_correction_ops,json=ramCorrectionOps,proto3" json:"ram_correction_ops,omitempty"`
	// List of changes to rate limiting values
	RlimitOps []*RlimitOp `protobuf:"bytes,23,rep,name=rlimit_ops,json=rlimitOps,proto3" json:"rlimit_ops,omitempty"`
	// List of table creations/deletions
	TableOps []*TableOp `protobuf:"bytes,24,rep,name=table_ops,json=tableOps,proto3" json:"table_ops,omitempty"`
	// Tree of creation, rather than execution
	CreationTree []*CreationFlatNode `protobuf:"bytes,25,rep,name=creation_tree,json=creationTree,proto3" json:"creation_tree,omitempty"`
}

func (x *TransactionTrace) Reset() {
	*x = TransactionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTrace) ProtoMessage() {}

func (x *TransactionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTrace.ProtoReflect.Descriptor instead.
func (*TransactionTrace) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{26}
}

func (x *TransactionTrace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TransactionTrace) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *TransactionTrace) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransactionTrace) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *TransactionTrace) GetProducerBlockId() string {
	if x != nil {
		return x.ProducerBlockId
	}
	return ""
}

func (x *TransactionTrace) GetReceipt() *TransactionReceiptHeader {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *TransactionTrace) GetElapsed() int64 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *TransactionTrace) GetNetUsage() uint64 {
	if x != nil {
		return x.NetUsage
	}
	return 0
}

func (x *TransactionTrace) GetScheduled() bool {
	if x != nil {
		return x.Scheduled
	}
	return false
}

func (x *TransactionTrace) GetActionTraces() []*ActionTrace {
	if x != nil {
		return x.ActionTraces
	}
	return nil
}

func (x *TransactionTrace) GetFailedDtrxTrace() *TransactionTrace {
	if x != nil {
		return x.FailedDtrxTrace
	}
	return nil
}

func (x *TransactionTrace) GetException() *Exception {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *TransactionTrace) GetErrorCode() uint64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *TransactionTrace) GetDbOps() []*DBOp {
	if x != nil {
		return x.DbOps
	}
	return nil
}

func (x *TransactionTrace) GetDtrxOps() []*DTrxOp {
	if x != nil {
		return x.DtrxOps
	}
	return nil
}

func (x *TransactionTrace) GetFeatureOps() []*FeatureOp {
	if x != nil {
		return x.FeatureOps
	}
	return nil
}

func (x *TransactionTrace) GetPermOps() []*PermOp {
	if x != nil {
		return x.PermOps
	}
	return nil
}

func (x *TransactionTrace) GetRamOps() []*RAMOp {
	if x != nil {
		return x.RamOps
	}
	return nil
}

func (x *TransactionTrace) GetRamCorrectionOps() []*RAMCorrectionOp {
	if x != nil {
		return x.RamCorrectionOps
	}
	return nil
}

func (x *TransactionTrace) GetRlimitOps() []*RlimitOp {
	if x != nil {
		return x.RlimitOps
	}
	return nil
}

func (x *TransactionTrace) GetTableOps() []*TableOp {
	if x != nil {
		return x.TableOps
	}
	return nil
}

func (x *TransactionTrace) GetCreationTree() []*CreationFlatNode {
	if x != nil {
		return x.CreationTree
	}
	return nil
}

type TransactionReceiptHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               TransactionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=sf.antelope.type.v1.TransactionStatus" json:"status,omitempty"`
	CpuUsageMicroSeconds uint32            `protobuf:"varint,2,opt,name=cpu_usage_micro_seconds,json=cpuUsageMicroSeconds,proto3" json:"cpu_usage_micro_seconds,omitempty"`
	NetUsageWords        uint32            `protobuf:"varint,3,opt,name=net_usage_words,json=netUsageWords,proto3" json:"net_usage_words,omitempty"`
}

func (x *TransactionReceiptHeader) Reset() {
	*x = TransactionReceiptHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReceiptHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceiptHeader) ProtoMessage() {}

func (x *TransactionReceiptHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceiptHeader.ProtoReflect.Descriptor instead.
func (*TransactionReceiptHeader) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{27}
}

func (x *TransactionReceiptHeader) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTIONSTATUS_NONE
}

func (x *TransactionReceiptHeader) GetCpuUsageMicroSeconds() uint32 {
	if x != nil {
		return x.CpuUsageMicroSeconds
	}
	return 0
}

func (x *TransactionReceiptHeader) GetNetUsageWords() uint32 {
	if x != nil {
		return x.NetUsageWords
	}
	return 0
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account       string             `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Name          string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Authorization []*PermissionLevel `protobuf:"bytes,3,rep,name=authorization,proto3" json:"authorization,omitempty"`
	JsonData      string             `protobuf:"bytes,4,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
	RawData       []byte             `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{28}
}

func (x *Action) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Action) GetAuthorization() []*PermissionLevel {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Action) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *Action) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type ActionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver         string                 `protobuf:"bytes,11,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Receipt          *ActionReceipt         `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Action           *Action                `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	ContextFree      bool                   `protobuf:"varint,3,opt,name=context_free,json=contextFree,proto3" json:"context_free,omitempty"`
	Elapsed          int64                  `protobuf:"varint,4,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	Console          string                 `protobuf:"bytes,5,opt,name=console,proto3" json:"console,omitempty"`
	TransactionId    string                 `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	BlockNum         uint64                 `protobuf:"varint,7,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	ProducerBlockId  string                 `protobuf:"bytes,8,opt,name=producer_block_id,json=producerBlockId,proto3" json:"producer_block_id,omitempty"`
	BlockTime        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	AccountRamDeltas []*AccountRAMDelta     `protobuf:"bytes,10,rep,name=account_ram_deltas,json=accountRamDeltas,proto3" json:"account_ram_deltas,omitempty"`
	// ReturnValue has been added in EOSIO 2.1.x as something that can be returned from the execution
	// of an action.
	//
	// See https://github.com/EOSIO/eos/pull/8327
	RawReturnValue                         []byte     `protobuf:"bytes,41,opt,name=raw_return_value,json=rawReturnValue,proto3" json:"raw_return_value,omitempty"`
	JsonReturnValue                        string     `protobuf:"bytes,42,opt,name=json_return_value,json=jsonReturnValue,proto3" json:"json_return_value,omitempty"`
	Exception                              *Exception `protobuf:"bytes,15,opt,name=exception,proto3" json:"exception,omitempty"`
	ErrorCode                              uint64     `protobuf:"varint,20,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` // https://github.com/EOSIO/eos/pull/7108
	ActionOrdinal                          uint32     `protobuf:"varint,16,opt,name=action_ordinal,json=actionOrdinal,proto3" json:"action_ordinal,omitempty"`
	CreatorActionOrdinal                   uint32     `protobuf:"varint,17,opt,name=creator_action_ordinal,json=creatorActionOrdinal,proto3" json:"creator_action_ordinal,omitempty"`
	ClosestUnnotifiedAncestorActionOrdinal uint32     `protobuf:"varint,18,opt,name=closest_unnotified_ancestor_action_ordinal,json=closestUnnotifiedAncestorActionOrdinal,proto3" json:"closest_unnotified_ancestor_action_ordinal,omitempty"`
	ExecutionIndex                         uint32     `protobuf:"varint,19,opt,name=execution_index,json=executionIndex,proto3" json:"execution_index,omitempty"`
	// Whether this action trace was a successful match, present only when filtering was applied on block. This
	// will be `true` if the Block `filtering_applied` is `true`, if the include CEL filter matched and
	// if the exclude CEL filter did NOT match.
	FilteringMatched bool `protobuf:"varint,30,opt,name=filtering_matched,json=filteringMatched,proto3" json:"filtering_matched,omitempty"`
	// Whether this action trace was a successful system match, present only when filtering was applied on block.
	// This will be `true` if the Block `filtering_applied` is `true`, if the system actions include CEL filter
	// matched, supersedes any exclude CEL filter.
	FilteringMatchedSystemActionFilter bool `protobuf:"varint,31,opt,name=filtering_matched_system_action_filter,json=filteringMatchedSystemActionFilter,proto3" json:"filtering_matched_system_action_filter,omitempty"`
}

func (x *ActionTrace) Reset() {
	*x = ActionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionTrace) ProtoMessage() {}

func (x *ActionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionTrace.ProtoReflect.Descriptor instead.
func (*ActionTrace) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{29}
}

func (x *ActionTrace) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *ActionTrace) GetReceipt() *ActionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *ActionTrace) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActionTrace) GetContextFree() bool {
	if x != nil {
		return x.ContextFree
	}
	return false
}

func (x *ActionTrace) GetElapsed() int64 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *ActionTrace) GetConsole() string {
	if x != nil {
		return x.Console
	}
	return ""
}

func (x *ActionTrace) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ActionTrace) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *ActionTrace) GetProducerBlockId() string {
	if x != nil {
		return x.ProducerBlockId
	}
	return ""
}

func (x *ActionTrace) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *ActionTrace) GetAccountRamDeltas() []*AccountRAMDelta {
	if x != nil {
		return x.AccountRamDeltas
	}
	return nil
}

func (x *ActionTrace) GetRawReturnValue() []byte {
	if x != nil {
		return x.RawReturnValue
	}
	return nil
}

func (x *ActionTrace) GetJsonReturnValue() string {
	if x != nil {
		return x.JsonReturnValue
	}
	return ""
}

func (x *ActionTrace) GetException() *Exception {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *ActionTrace) GetErrorCode() uint64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ActionTrace) GetActionOrdinal() uint32 {
	if x != nil {
		return x.ActionOrdinal
	}
	return 0
}

func (x *ActionTrace) GetCreatorActionOrdinal() uint32 {
	if x != nil {
		return x.CreatorActionOrdinal
	}
	return 0
}

func (x *ActionTrace) GetClosestUnnotifiedAncestorActionOrdinal() uint32 {
	if x != nil {
		return x.ClosestUnnotifiedAncestorActionOrdinal
	}
	return 0
}

func (x *ActionTrace) GetExecutionIndex() uint32 {
	if x != nil {
		return x.ExecutionIndex
	}
	return 0
}

func (x *ActionTrace) GetFilteringMatched() bool {
	if x != nil {
		return x.FilteringMatched
	}
	return false
}

func (x *ActionTrace) GetFilteringMatchedSystemActionFilter() bool {
	if x != nil {
		return x.FilteringMatchedSystemActionFilter
	}
	return false
}

type ActionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver       string          `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Digest         string          `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	GlobalSequence uint64          `protobuf:"varint,3,opt,name=global_sequence,json=globalSequence,proto3" json:"global_sequence,omitempty"`
	AuthSequence   []*AuthSequence `protobuf:"bytes,4,rep,name=auth_sequence,json=authSequence,proto3" json:"auth_sequence,omitempty"`
	RecvSequence   uint64          `protobuf:"varint,5,opt,name=recv_sequence,json=recvSequence,proto3" json:"recv_sequence,omitempty"`
	CodeSequence   uint64          `protobuf:"varint,6,opt,name=code_sequence,json=codeSequence,proto3" json:"code_sequence,omitempty"`
	AbiSequence    uint64          `protobuf:"varint,7,opt,name=abi_sequence,json=abiSequence,proto3" json:"abi_sequence,omitempty"`
}

func (x *ActionReceipt) Reset() {
	*x = ActionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionReceipt) ProtoMessage() {}

func (x *ActionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionReceipt.ProtoReflect.Descriptor instead.
func (*ActionReceipt) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{30}
}

func (x *ActionReceipt) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *ActionReceipt) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *ActionReceipt) GetGlobalSequence() uint64 {
	if x != nil {
		return x.GlobalSequence
	}
	return 0
}

func (x *ActionReceipt) GetAuthSequence() []*AuthSequence {
	if x != nil {
		return x.AuthSequence
	}
	return nil
}

func (x *ActionReceipt) GetRecvSequence() uint64 {
	if x != nil {
		return x.RecvSequence
	}
	return 0
}

func (x *ActionReceipt) GetCodeSequence() uint64 {
	if x != nil {
		return x.CodeSequence
	}
	return 0
}

func (x *ActionReceipt) GetAbiSequence() uint64 {
	if x != nil {
		return x.AbiSequence
	}
	return 0
}

type AuthSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Sequence    uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *AuthSequence) Reset() {
	*x = AuthSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSequence) ProtoMessage() {}

func (x *AuthSequence) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSequence.ProtoReflect.Descriptor instead.
func (*AuthSequence) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{31}
}

func (x *AuthSequence) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AuthSequence) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type AccountRAMDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Delta   int64  `protobuf:"varint,2,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *AccountRAMDelta) Reset() {
	*x = AccountRAMDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRAMDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRAMDelta) ProtoMessage() {}

func (x *AccountRAMDelta) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRAMDelta.ProtoReflect.Descriptor instead.
func (*AccountRAMDelta) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{32}
}

func (x *AccountRAMDelta) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountRAMDelta) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type AccountDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Delta   int64  `protobuf:"varint,2,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *AccountDelta) Reset() {
	*x = AccountDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDelta) ProtoMessage() {}

func (x *AccountDelta) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDelta.ProtoReflect.Descriptor instead.
func (*AccountDelta) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{33}
}

func (x *AccountDelta) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountDelta) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{34}
}

func (x *Extension) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Extension) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// FIXME: this is really just an output of the implicit transactions, isn't it? We don't have
// other operations here.. do we?  What's the `name` anyway?
type TrxOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     TrxOp_Operation    `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.antelope.type.v1.TrxOp_Operation" json:"operation,omitempty"`
	Name          string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TransactionId string             `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Transaction   *SignedTransaction `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TrxOp) Reset() {
	*x = TrxOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrxOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrxOp) ProtoMessage() {}

func (x *TrxOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrxOp.ProtoReflect.Descriptor instead.
func (*TrxOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{35}
}

func (x *TrxOp) GetOperation() TrxOp_Operation {
	if x != nil {
		return x.Operation
	}
	return TrxOp_OPERATION_UNKNOWN
}

func (x *TrxOp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrxOp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TrxOp) GetTransaction() *SignedTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type DBOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   DBOp_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.antelope.type.v1.DBOp_Operation" json:"operation,omitempty"`
	ActionIndex uint32         `protobuf:"varint,2,opt,name=action_index,json=actionIndex,proto3" json:"action_index,omitempty"`
	Code        string         `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Scope       string         `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	TableName   string         `protobuf:"bytes,5,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	PrimaryKey  string         `protobuf:"bytes,6,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	OldPayer    string         `protobuf:"bytes,7,opt,name=old_payer,json=oldPayer,proto3" json:"old_payer,omitempty"`
	NewPayer    string         `protobuf:"bytes,8,opt,name=new_payer,json=newPayer,proto3" json:"new_payer,omitempty"`
	OldData     []byte         `protobuf:"bytes,9,opt,name=old_data,json=oldData,proto3" json:"old_data,omitempty"`
	NewData     []byte         `protobuf:"bytes,10,opt,name=new_data,json=newData,proto3" json:"new_data,omitempty"`
	OldDataJson string         `protobuf:"bytes,11,opt,name=old_data_json,json=oldDataJson,proto3" json:"old_data_json,omitempty"`
	NewDataJson string         `protobuf:"bytes,12,opt,name=new_data_json,json=newDataJson,proto3" json:"new_data_json,omitempty"`
}

func (x *DBOp) Reset() {
	*x = DBOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBOp) ProtoMessage() {}

func (x *DBOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBOp.ProtoReflect.Descriptor instead.
func (*DBOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{36}
}

func (x *DBOp) GetOperation() DBOp_Operation {
	if x != nil {
		return x.Operation
	}
	return DBOp_OPERATION_UNKNOWN
}

func (x *DBOp) GetActionIndex() uint32 {
	if x != nil {
		return x.ActionIndex
	}
	return 0
}

func (x *DBOp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DBOp) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *DBOp) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DBOp) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *DBOp) GetOldPayer() string {
	if x != nil {
		return x.OldPayer
	}
	return ""
}

func (x *DBOp) GetNewPayer() string {
	if x != nil {
		return x.NewPayer
	}
	return ""
}

func (x *DBOp) GetOldData() []byte {
	if x != nil {
		return x.OldData
	}
	return nil
}

func (x *DBOp) GetNewData() []byte {
	if x != nil {
		return x.NewData
	}
	return nil
}

func (x *DBOp) GetOldDataJson() string {
	if x != nil {
		return x.OldDataJson
	}
	return ""
}

func (x *DBOp) GetNewDataJson() string {
	if x != nil {
		return x.NewDataJson
	}
	return ""
}

type RAMOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation is the legacy operation tag that we used initially. This is replaced
	// by a combination of `Namespce` and `Action`.
	//
	// Deprecated: Use `Namespace` and `Action` instead to determine what the RAM operation represents
	Operation   RAMOp_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.antelope.type.v1.RAMOp_Operation" json:"operation,omitempty"`
	ActionIndex uint32          `protobuf:"varint,2,opt,name=action_index,json=actionIndex,proto3" json:"action_index,omitempty"`
	Payer       string          `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	Delta       int64           `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
	Usage       uint64          `protobuf:"varint,5,opt,name=usage,proto3" json:"usage,omitempty"`
	// Namespace representing the category the RAM operation belong to, like
	// account, table_row, table, etc.
	//
	// This coupled with `action` replaces the `operation` field.
	Namespace RAMOp_Namespace `protobuf:"varint,6,opt,name=namespace,proto3,enum=sf.antelope.type.v1.RAMOp_Namespace" json:"namespace,omitempty"`
	// Namespace representing the action the RAM operation did, like
	// add, delete or remove an object.
	//
	// This coupled with `action` replaces the `operation` field.
	Action RAMOp_Action `protobuf:"varint,7,opt,name=action,proto3,enum=sf.antelope.type.v1.RAMOp_Action" json:"action,omitempty"`
	// UniqueKey gives a unique key to the operation, this unique key is opaque,
	// does not necessarly represents anything and should uniquely represents the
	// RAM Operation within a given timeframe of block (a key should never overlap
	// any other keys (per namespace), on any blocks span).
	UniqueKey string `protobuf:"bytes,8,opt,name=unique_key,json=uniqueKey,proto3" json:"unique_key,omitempty"`
}

func (x *RAMOp) Reset() {
	*x = RAMOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RAMOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RAMOp) ProtoMessage() {}

func (x *RAMOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RAMOp.ProtoReflect.Descriptor instead.
func (*RAMOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{37}
}

func (x *RAMOp) GetOperation() RAMOp_Operation {
	if x != nil {
		return x.Operation
	}
	return RAMOp_OPERATION_UNKNOWN
}

func (x *RAMOp) GetActionIndex() uint32 {
	if x != nil {
		return x.ActionIndex
	}
	return 0
}

func (x *RAMOp) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *RAMOp) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *RAMOp) GetUsage() uint64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *RAMOp) GetNamespace() RAMOp_Namespace {
	if x != nil {
		return x.Namespace
	}
	return RAMOp_NAMESPACE_UNKNOWN
}

func (x *RAMOp) GetAction() RAMOp_Action {
	if x != nil {
		return x.Action
	}
	return RAMOp_ACTION_UNKNOWN
}

func (x *RAMOp) GetUniqueKey() string {
	if x != nil {
		return x.UniqueKey
	}
	return ""
}

type RAMCorrectionOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrectionId string `protobuf:"bytes,1,opt,name=correction_id,json=correctionId,proto3" json:"correction_id,omitempty"`
	UniqueKey    string `protobuf:"bytes,2,opt,name=unique_key,json=uniqueKey,proto3" json:"unique_key,omitempty"`
	Payer        string `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	Delta        int64  `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *RAMCorrectionOp) Reset() {
	*x = RAMCorrectionOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RAMCorrectionOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RAMCorrectionOp) ProtoMessage() {}

func (x *RAMCorrectionOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RAMCorrectionOp.ProtoReflect.Descriptor instead.
func (*RAMCorrectionOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{38}
}

func (x *RAMCorrectionOp) GetCorrectionId() string {
	if x != nil {
		return x.CorrectionId
	}
	return ""
}

func (x *RAMCorrectionOp) GetUniqueKey() string {
	if x != nil {
		return x.UniqueKey
	}
	return ""
}

func (x *RAMCorrectionOp) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *RAMCorrectionOp) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type TableOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   TableOp_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.antelope.type.v1.TableOp_Operation" json:"operation,omitempty"`
	ActionIndex uint32            `protobuf:"varint,2,opt,name=action_index,json=actionIndex,proto3" json:"action_index,omitempty"`
	Payer       string            `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	Code        string            `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Scope       string            `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	TableName   string            `protobuf:"bytes,6,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *TableOp) Reset() {
	*x = TableOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableOp) ProtoMessage() {}

func (x *TableOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableOp.ProtoReflect.Descriptor instead.
func (*TableOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{39}
}

func (x *TableOp) GetOperation() TableOp_Operation {
	if x != nil {
		return x.Operation
	}
	return TableOp_OPERATION_UNKNOWN
}

func (x *TableOp) GetActionIndex() uint32 {
	if x != nil {
		return x.ActionIndex
	}
	return 0
}

func (x *TableOp) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *TableOp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TableOp) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *TableOp) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type DTrxOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     DTrxOp_Operation   `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.antelope.type.v1.DTrxOp_Operation" json:"operation,omitempty"`
	ActionIndex   uint32             `protobuf:"varint,2,opt,name=action_index,json=actionIndex,proto3" json:"action_index,omitempty"`
	Sender        string             `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderId      string             `protobuf:"bytes,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Payer         string             `protobuf:"bytes,5,opt,name=payer,proto3" json:"payer,omitempty"`
	PublishedAt   string             `protobuf:"bytes,6,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	DelayUntil    string             `protobuf:"bytes,7,opt,name=delay_until,json=delayUntil,proto3" json:"delay_until,omitempty"`
	ExpirationAt  string             `protobuf:"bytes,8,opt,name=expiration_at,json=expirationAt,proto3" json:"expiration_at,omitempty"`
	TransactionId string             `protobuf:"bytes,9,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Transaction   *SignedTransaction `protobuf:"bytes,10,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *DTrxOp) Reset() {
	*x = DTrxOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTrxOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTrxOp) ProtoMessage() {}

func (x *DTrxOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTrxOp.ProtoReflect.Descriptor instead.
func (*DTrxOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{40}
}

func (x *DTrxOp) GetOperation() DTrxOp_Operation {
	if x != nil {
		return x.Operation
	}
	return DTrxOp_OPERATION_UNKNOWN
}

func (x *DTrxOp) GetActionIndex() uint32 {
	if x != nil {
		return x.ActionIndex
	}
	return 0
}

func (x *DTrxOp) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *DTrxOp) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *DTrxOp) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *DTrxOp) GetPublishedAt() string {
	if x != nil {
		return x.PublishedAt
	}
	return ""
}

func (x *DTrxOp) GetDelayUntil() string {
	if x != nil {
		return x.DelayUntil
	}
	return ""
}

func (x *DTrxOp) GetExpirationAt() string {
	if x != nil {
		return x.ExpirationAt
	}
	return ""
}

func (x *DTrxOp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *DTrxOp) GetTransaction() *SignedTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type ExtDTrxOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceTransactionId string                 `protobuf:"bytes,1,opt,name=source_transaction_id,json=sourceTransactionId,proto3" json:"source_transaction_id,omitempty"`
	BlockNum            uint64                 `protobuf:"varint,2,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockId             string                 `protobuf:"bytes,3,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockTime           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	DtrxOp              *DTrxOp                `protobuf:"bytes,5,opt,name=dtrx_op,json=dtrxOp,proto3" json:"dtrx_op,omitempty"`
}

func (x *ExtDTrxOp) Reset() {
	*x = ExtDTrxOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtDTrxOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtDTrxOp) ProtoMessage() {}

func (x *ExtDTrxOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtDTrxOp.ProtoReflect.Descriptor instead.
func (*ExtDTrxOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{41}
}

func (x *ExtDTrxOp) GetSourceTransactionId() string {
	if x != nil {
		return x.SourceTransactionId
	}
	return ""
}

func (x *ExtDTrxOp) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *ExtDTrxOp) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *ExtDTrxOp) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *ExtDTrxOp) GetDtrxOp() *DTrxOp {
	if x != nil {
		return x.DtrxOp
	}
	return nil
}

type FeatureOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	ActionIndex   uint32   `protobuf:"varint,2,opt,name=action_index,json=actionIndex,proto3" json:"action_index,omitempty"`
	FeatureDigest string   `protobuf:"bytes,3,opt,name=feature_digest,json=featureDigest,proto3" json:"feature_digest,omitempty"`
	Feature       *Feature `protobuf:"bytes,4,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *FeatureOp) Reset() {
	*x = FeatureOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureOp) ProtoMessage() {}

func (x *FeatureOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureOp.ProtoReflect.Descriptor instead.
func (*FeatureOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{42}
}

func (x *FeatureOp) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *FeatureOp) GetActionIndex() uint32 {
	if x != nil {
		return x.ActionIndex
	}
	return 0
}

func (x *FeatureOp) GetFeatureDigest() string {
	if x != nil {
		return x.FeatureDigest
	}
	return ""
}

func (x *FeatureOp) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type CreationFlatNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorActionIndex   int32  `protobuf:"varint,1,opt,name=creator_action_index,json=creatorActionIndex,proto3" json:"creator_action_index,omitempty"`
	ExecutionActionIndex uint32 `protobuf:"varint,2,opt,name=execution_action_index,json=executionActionIndex,proto3" json:"execution_action_index,omitempty"`
}

func (x *CreationFlatNode) Reset() {
	*x = CreationFlatNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreationFlatNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreationFlatNode) ProtoMessage() {}

func (x *CreationFlatNode) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreationFlatNode.ProtoReflect.Descriptor instead.
func (*CreationFlatNode) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{43}
}

func (x *CreationFlatNode) GetCreatorActionIndex() int32 {
	if x != nil {
		return x.CreatorActionIndex
	}
	return 0
}

func (x *CreationFlatNode) GetExecutionActionIndex() uint32 {
	if x != nil {
		return x.ExecutionActionIndex
	}
	return 0
}

type PermOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   PermOp_Operation  `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.antelope.type.v1.PermOp_Operation" json:"operation,omitempty"`
	ActionIndex uint32            `protobuf:"varint,2,opt,name=action_index,json=actionIndex,proto3" json:"action_index,omitempty"`
	OldPerm     *PermissionObject `protobuf:"bytes,8,opt,name=old_perm,json=oldPerm,proto3" json:"old_perm,omitempty"`
	NewPerm     *PermissionObject `protobuf:"bytes,9,opt,name=new_perm,json=newPerm,proto3" json:"new_perm,omitempty"`
}

func (x *PermOp) Reset() {
	*x = PermOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermOp) ProtoMessage() {}

func (x *PermOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermOp.ProtoReflect.Descriptor instead.
func (*PermOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{44}
}

func (x *PermOp) GetOperation() PermOp_Operation {
	if x != nil {
		return x.Operation
	}
	return PermOp_OPERATION_UNKNOWN
}

func (x *PermOp) GetActionIndex() uint32 {
	if x != nil {
		return x.ActionIndex
	}
	return 0
}

func (x *PermOp) GetOldPerm() *PermissionObject {
	if x != nil {
		return x.OldPerm
	}
	return nil
}

func (x *PermOp) GetNewPerm() *PermissionObject {
	if x != nil {
		return x.NewPerm
	}
	return nil
}

type PermissionObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id represents the EOSIO internal id of this permission object.
	Id uint64 `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`
	// ParentId represents the EOSIO internal id of the parent's of this permission object.
	ParentId uint64 `protobuf:"varint,11,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Owner is the account for which this permission was set
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Name is the permission's name this permission object is known as.
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Authority   *Authority             `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (x *PermissionObject) Reset() {
	*x = PermissionObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionObject) ProtoMessage() {}

func (x *PermissionObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionObject.ProtoReflect.Descriptor instead.
func (*PermissionObject) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{45}
}

func (x *PermissionObject) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PermissionObject) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *PermissionObject) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *PermissionObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PermissionObject) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *PermissionObject) GetAuthority() *Authority {
	if x != nil {
		return x.Authority
	}
	return nil
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent       string     `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	RequiredAuth *Authority `protobuf:"bytes,3,opt,name=required_auth,json=requiredAuth,proto3" json:"required_auth,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{46}
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Permission) GetRequiredAuth() *Authority {
	if x != nil {
		return x.RequiredAuth
	}
	return nil
}

type Authority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold uint32                   `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Keys      []*KeyWeight             `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Accounts  []*PermissionLevelWeight `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Waits     []*WaitWeight            `protobuf:"bytes,4,rep,name=waits,proto3" json:"waits,omitempty"`
}

func (x *Authority) Reset() {
	*x = Authority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority) ProtoMessage() {}

func (x *Authority) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority.ProtoReflect.Descriptor instead.
func (*Authority) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{47}
}

func (x *Authority) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Authority) GetKeys() []*KeyWeight {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Authority) GetAccounts() []*PermissionLevelWeight {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Authority) GetWaits() []*WaitWeight {
	if x != nil {
		return x.Waits
	}
	return nil
}

type KeyWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Weight    uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *KeyWeight) Reset() {
	*x = KeyWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyWeight) ProtoMessage() {}

func (x *KeyWeight) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyWeight.ProtoReflect.Descriptor instead.
func (*KeyWeight) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{48}
}

func (x *KeyWeight) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *KeyWeight) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type PermissionLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor      string `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Permission string `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *PermissionLevel) Reset() {
	*x = PermissionLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionLevel) ProtoMessage() {}

func (x *PermissionLevel) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionLevel.ProtoReflect.Descriptor instead.
func (*PermissionLevel) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{49}
}

func (x *PermissionLevel) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *PermissionLevel) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

type PermissionLevelWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission *PermissionLevel `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
	Weight     uint32           `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *PermissionLevelWeight) Reset() {
	*x = PermissionLevelWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionLevelWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionLevelWeight) ProtoMessage() {}

func (x *PermissionLevelWeight) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionLevelWeight.ProtoReflect.Descriptor instead.
func (*PermissionLevelWeight) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{50}
}

func (x *PermissionLevelWeight) GetPermission() *PermissionLevel {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *PermissionLevelWeight) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type WaitWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitSec uint32 `protobuf:"varint,1,opt,name=wait_sec,json=waitSec,proto3" json:"wait_sec,omitempty"`
	Weight  uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *WaitWeight) Reset() {
	*x = WaitWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitWeight) ProtoMessage() {}

func (x *WaitWeight) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitWeight.ProtoReflect.Descriptor instead.
func (*WaitWeight) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{51}
}

func (x *WaitWeight) GetWaitSec() uint32 {
	if x != nil {
		return x.WaitSec
	}
	return 0
}

func (x *WaitWeight) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type RlimitOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation RlimitOp_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.antelope.type.v1.RlimitOp_Operation" json:"operation,omitempty"`
	// Types that are assignable to Kind:
	//
	//	*RlimitOp_State
	//	*RlimitOp_Config
	//	*RlimitOp_AccountLimits
	//	*RlimitOp_AccountUsage
	Kind isRlimitOp_Kind `protobuf_oneof:"kind"`
}

func (x *RlimitOp) Reset() {
	*x = RlimitOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlimitOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlimitOp) ProtoMessage() {}

func (x *RlimitOp) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlimitOp.ProtoReflect.Descriptor instead.
func (*RlimitOp) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{52}
}

func (x *RlimitOp) GetOperation() RlimitOp_Operation {
	if x != nil {
		return x.Operation
	}
	return RlimitOp_OPERATION_UNKNOWN
}

func (m *RlimitOp) GetKind() isRlimitOp_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *RlimitOp) GetState() *RlimitState {
	if x, ok := x.GetKind().(*RlimitOp_State); ok {
		return x.State
	}
	return nil
}

func (x *RlimitOp) GetConfig() *RlimitConfig {
	if x, ok := x.GetKind().(*RlimitOp_Config); ok {
		return x.Config
	}
	return nil
}

func (x *RlimitOp) GetAccountLimits() *RlimitAccountLimits {
	if x, ok := x.GetKind().(*RlimitOp_AccountLimits); ok {
		return x.AccountLimits
	}
	return nil
}

func (x *RlimitOp) GetAccountUsage() *RlimitAccountUsage {
	if x, ok := x.GetKind().(*RlimitOp_AccountUsage); ok {
		return x.AccountUsage
	}
	return nil
}

type isRlimitOp_Kind interface {
	isRlimitOp_Kind()
}

type RlimitOp_State struct {
	State *RlimitState `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

type RlimitOp_Config struct {
	Config *RlimitConfig `protobuf:"bytes,3,opt,name=config,proto3,oneof"`
}

type RlimitOp_AccountLimits struct {
	AccountLimits *RlimitAccountLimits `protobuf:"bytes,4,opt,name=account_limits,json=accountLimits,proto3,oneof"`
}

type RlimitOp_AccountUsage struct {
	AccountUsage *RlimitAccountUsage `protobuf:"bytes,5,opt,name=account_usage,json=accountUsage,proto3,oneof"`
}

func (*RlimitOp_State) isRlimitOp_Kind() {}

func (*RlimitOp_Config) isRlimitOp_Kind() {}

func (*RlimitOp_AccountLimits) isRlimitOp_Kind() {}

func (*RlimitOp_AccountUsage) isRlimitOp_Kind() {}

type RlimitState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AverageBlockNetUsage *UsageAccumulator `protobuf:"bytes,1,opt,name=average_block_net_usage,json=averageBlockNetUsage,proto3" json:"average_block_net_usage,omitempty"`
	AverageBlockCpuUsage *UsageAccumulator `protobuf:"bytes,2,opt,name=average_block_cpu_usage,json=averageBlockCpuUsage,proto3" json:"average_block_cpu_usage,omitempty"`
	PendingNetUsage      uint64            `protobuf:"varint,3,opt,name=pending_net_usage,json=pendingNetUsage,proto3" json:"pending_net_usage,omitempty"`
	PendingCpuUsage      uint64            `protobuf:"varint,4,opt,name=pending_cpu_usage,json=pendingCpuUsage,proto3" json:"pending_cpu_usage,omitempty"`
	TotalNetWeight       uint64            `protobuf:"varint,5,opt,name=total_net_weight,json=totalNetWeight,proto3" json:"total_net_weight,omitempty"`
	TotalCpuWeight       uint64            `protobuf:"varint,6,opt,name=total_cpu_weight,json=totalCpuWeight,proto3" json:"total_cpu_weight,omitempty"`
	TotalRamBytes        uint64            `protobuf:"varint,7,opt,name=total_ram_bytes,json=totalRamBytes,proto3" json:"total_ram_bytes,omitempty"`
	VirtualNetLimit      uint64            `protobuf:"varint,8,opt,name=virtual_net_limit,json=virtualNetLimit,proto3" json:"virtual_net_limit,omitempty"`
	VirtualCpuLimit      uint64            `protobuf:"varint,9,opt,name=virtual_cpu_limit,json=virtualCpuLimit,proto3" json:"virtual_cpu_limit,omitempty"`
}

func (x *RlimitState) Reset() {
	*x = RlimitState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlimitState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlimitState) ProtoMessage() {}

func (x *RlimitState) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlimitState.ProtoReflect.Descriptor instead.
func (*RlimitState) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{53}
}

func (x *RlimitState) GetAverageBlockNetUsage() *UsageAccumulator {
	if x != nil {
		return x.AverageBlockNetUsage
	}
	return nil
}

func (x *RlimitState) GetAverageBlockCpuUsage() *UsageAccumulator {
	if x != nil {
		return x.AverageBlockCpuUsage
	}
	return nil
}

func (x *RlimitState) GetPendingNetUsage() uint64 {
	if x != nil {
		return x.PendingNetUsage
	}
	return 0
}

func (x *RlimitState) GetPendingCpuUsage() uint64 {
	if x != nil {
		return x.PendingCpuUsage
	}
	return 0
}

func (x *RlimitState) GetTotalNetWeight() uint64 {
	if x != nil {
		return x.TotalNetWeight
	}
	return 0
}

func (x *RlimitState) GetTotalCpuWeight() uint64 {
	if x != nil {
		return x.TotalCpuWeight
	}
	return 0
}

func (x *RlimitState) GetTotalRamBytes() uint64 {
	if x != nil {
		return x.TotalRamBytes
	}
	return 0
}

func (x *RlimitState) GetVirtualNetLimit() uint64 {
	if x != nil {
		return x.VirtualNetLimit
	}
	return 0
}

func (x *RlimitState) GetVirtualCpuLimit() uint64 {
	if x != nil {
		return x.VirtualCpuLimit
	}
	return 0
}

type RlimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuLimitParameters           *ElasticLimitParameters `protobuf:"bytes,1,opt,name=cpu_limit_parameters,json=cpuLimitParameters,proto3" json:"cpu_limit_parameters,omitempty"`
	NetLimitParameters           *ElasticLimitParameters `protobuf:"bytes,2,opt,name=net_limit_parameters,json=netLimitParameters,proto3" json:"net_limit_parameters,omitempty"`
	AccountCpuUsageAverageWindow uint32                  `protobuf:"varint,3,opt,name=account_cpu_usage_average_window,json=accountCpuUsageAverageWindow,proto3" json:"account_cpu_usage_average_window,omitempty"`
	AccountNetUsageAverageWindow uint32                  `protobuf:"varint,4,opt,name=account_net_usage_average_window,json=accountNetUsageAverageWindow,proto3" json:"account_net_usage_average_window,omitempty"`
}

func (x *RlimitConfig) Reset() {
	*x = RlimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlimitConfig) ProtoMessage() {}

func (x *RlimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlimitConfig.ProtoReflect.Descriptor instead.
func (*RlimitConfig) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{54}
}

func (x *RlimitConfig) GetCpuLimitParameters() *ElasticLimitParameters {
	if x != nil {
		return x.CpuLimitParameters
	}
	return nil
}

func (x *RlimitConfig) GetNetLimitParameters() *ElasticLimitParameters {
	if x != nil {
		return x.NetLimitParameters
	}
	return nil
}

func (x *RlimitConfig) GetAccountCpuUsageAverageWindow() uint32 {
	if x != nil {
		return x.AccountCpuUsageAverageWindow
	}
	return 0
}

func (x *RlimitConfig) GetAccountNetUsageAverageWindow() uint32 {
	if x != nil {
		return x.AccountNetUsageAverageWindow
	}
	return 0
}

type RlimitAccountLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Pending   bool   `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	NetWeight int64  `protobuf:"varint,3,opt,name=net_weight,json=netWeight,proto3" json:"net_weight,omitempty"`
	CpuWeight int64  `protobuf:"varint,4,opt,name=cpu_weight,json=cpuWeight,proto3" json:"cpu_weight,omitempty"`
	RamBytes  int64  `protobuf:"varint,5,opt,name=ram_bytes,json=ramBytes,proto3" json:"ram_bytes,omitempty"`
}

func (x *RlimitAccountLimits) Reset() {
	*x = RlimitAccountLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlimitAccountLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlimitAccountLimits) ProtoMessage() {}

func (x *RlimitAccountLimits) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlimitAccountLimits.ProtoReflect.Descriptor instead.
func (*RlimitAccountLimits) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{55}
}

func (x *RlimitAccountLimits) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RlimitAccountLimits) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *RlimitAccountLimits) GetNetWeight() int64 {
	if x != nil {
		return x.NetWeight
	}
	return 0
}

func (x *RlimitAccountLimits) GetCpuWeight() int64 {
	if x != nil {
		return x.CpuWeight
	}
	return 0
}

func (x *RlimitAccountLimits) GetRamBytes() int64 {
	if x != nil {
		return x.RamBytes
	}
	return 0
}

type RlimitAccountUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner    string            `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	NetUsage *UsageAccumulator `protobuf:"bytes,2,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	CpuUsage *UsageAccumulator `protobuf:"bytes,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	RamUsage uint64            `protobuf:"varint,4,opt,name=ram_usage,json=ramUsage,proto3" json:"ram_usage,omitempty"`
}

func (x *RlimitAccountUsage) Reset() {
	*x = RlimitAccountUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlimitAccountUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlimitAccountUsage) ProtoMessage() {}

func (x *RlimitAccountUsage) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlimitAccountUsage.ProtoReflect.Descriptor instead.
func (*RlimitAccountUsage) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{56}
}

func (x *RlimitAccountUsage) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RlimitAccountUsage) GetNetUsage() *UsageAccumulator {
	if x != nil {
		return x.NetUsage
	}
	return nil
}

func (x *RlimitAccountUsage) GetCpuUsage() *UsageAccumulator {
	if x != nil {
		return x.CpuUsage
	}
	return nil
}

func (x *RlimitAccountUsage) GetRamUsage() uint64 {
	if x != nil {
		return x.RamUsage
	}
	return 0
}

type UsageAccumulator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastOrdinal uint32 `protobuf:"varint,1,opt,name=last_ordinal,json=lastOrdinal,proto3" json:"last_ordinal,omitempty"`
	ValueEx     uint64 `protobuf:"varint,2,opt,name=value_ex,json=valueEx,proto3" json:"value_ex,omitempty"`
	Consumed    uint64 `protobuf:"varint,3,opt,name=consumed,proto3" json:"consumed,omitempty"`
}

func (x *UsageAccumulator) Reset() {
	*x = UsageAccumulator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageAccumulator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageAccumulator) ProtoMessage() {}

func (x *UsageAccumulator) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageAccumulator.ProtoReflect.Descriptor instead.
func (*UsageAccumulator) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{57}
}

func (x *UsageAccumulator) GetLastOrdinal() uint32 {
	if x != nil {
		return x.LastOrdinal
	}
	return 0
}

func (x *UsageAccumulator) GetValueEx() uint64 {
	if x != nil {
		return x.ValueEx
	}
	return 0
}

func (x *UsageAccumulator) GetConsumed() uint64 {
	if x != nil {
		return x.Consumed
	}
	return 0
}

type ElasticLimitParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target        uint64 `protobuf:"varint,1,opt,name=target,proto3" json:"target,omitempty"`
	Max           uint64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Periods       uint32 `protobuf:"varint,3,opt,name=periods,proto3" json:"periods,omitempty"`
	MaxMultiplier uint32 `protobuf:"varint,4,opt,name=max_multiplier,json=maxMultiplier,proto3" json:"max_multiplier,omitempty"`
	ContractRate  *Ratio `protobuf:"bytes,5,opt,name=contract_rate,json=contractRate,proto3" json:"contract_rate,omitempty"`
	ExpandRate    *Ratio `protobuf:"bytes,6,opt,name=expand_rate,json=expandRate,proto3" json:"expand_rate,omitempty"`
}

func (x *ElasticLimitParameters) Reset() {
	*x = ElasticLimitParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticLimitParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticLimitParameters) ProtoMessage() {}

func (x *ElasticLimitParameters) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticLimitParameters.ProtoReflect.Descriptor instead.
func (*ElasticLimitParameters) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{58}
}

func (x *ElasticLimitParameters) GetTarget() uint64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *ElasticLimitParameters) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *ElasticLimitParameters) GetPeriods() uint32 {
	if x != nil {
		return x.Periods
	}
	return 0
}

func (x *ElasticLimitParameters) GetMaxMultiplier() uint32 {
	if x != nil {
		return x.MaxMultiplier
	}
	return 0
}

func (x *ElasticLimitParameters) GetContractRate() *Ratio {
	if x != nil {
		return x.ContractRate
	}
	return nil
}

func (x *ElasticLimitParameters) GetExpandRate() *Ratio {
	if x != nil {
		return x.ExpandRate
	}
	return nil
}

type Ratio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numerator   uint64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator uint64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *Ratio) Reset() {
	*x = Ratio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratio) ProtoMessage() {}

func (x *Ratio) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratio.ProtoReflect.Descriptor instead.
func (*Ratio) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{59}
}

func (x *Ratio) GetNumerator() uint64 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *Ratio) GetDenominator() uint64 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

type Exception struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Name    string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Stack   []*Exception_LogMessage `protobuf:"bytes,4,rep,name=stack,proto3" json:"stack,omitempty"`
}

func (x *Exception) Reset() {
	*x = Exception{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exception) ProtoMessage() {}

func (x *Exception) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exception.ProtoReflect.Descriptor instead.
func (*Exception) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{60}
}

func (x *Exception) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Exception) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exception) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Exception) GetStack() []*Exception_LogMessage {
	if x != nil {
		return x.Stack
	}
	return nil
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureDigest          string                  `protobuf:"bytes,1,opt,name=feature_digest,json=featureDigest,proto3" json:"feature_digest,omitempty"`
	SubjectiveRestrictions *SubjectiveRestrictions `protobuf:"bytes,2,opt,name=subjective_restrictions,json=subjectiveRestrictions,proto3" json:"subjective_restrictions,omitempty"`
	DescriptionDigest      string                  `protobuf:"bytes,3,opt,name=description_digest,json=descriptionDigest,proto3" json:"description_digest,omitempty"`
	Dependencies           []string                `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	ProtocolFeatureType    string                  `protobuf:"bytes,5,opt,name=protocol_feature_type,json=protocolFeatureType,proto3" json:"protocol_feature_type,omitempty"`
	Specification          []*Specification        `protobuf:"bytes,6,rep,name=specification,proto3" json:"specification,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{61}
}

func (x *Feature) GetFeatureDigest() string {
	if x != nil {
		return x.FeatureDigest
	}
	return ""
}

func (x *Feature) GetSubjectiveRestrictions() *SubjectiveRestrictions {
	if x != nil {
		return x.SubjectiveRestrictions
	}
	return nil
}

func (x *Feature) GetDescriptionDigest() string {
	if x != nil {
		return x.DescriptionDigest
	}
	return ""
}

func (x *Feature) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Feature) GetProtocolFeatureType() string {
	if x != nil {
		return x.ProtocolFeatureType
	}
	return ""
}

func (x *Feature) GetSpecification() []*Specification {
	if x != nil {
		return x.Specification
	}
	return nil
}

type SubjectiveRestrictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                       bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	PreactivationRequired         bool   `protobuf:"varint,2,opt,name=preactivation_required,json=preactivationRequired,proto3" json:"preactivation_required,omitempty"`
	EarliestAllowedActivationTime string `protobuf:"bytes,3,opt,name=earliest_allowed_activation_time,json=earliestAllowedActivationTime,proto3" json:"earliest_allowed_activation_time,omitempty"`
}

func (x *SubjectiveRestrictions) Reset() {
	*x = SubjectiveRestrictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectiveRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectiveRestrictions) ProtoMessage() {}

func (x *SubjectiveRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectiveRestrictions.ProtoReflect.Descriptor instead.
func (*SubjectiveRestrictions) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{62}
}

func (x *SubjectiveRestrictions) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SubjectiveRestrictions) GetPreactivationRequired() bool {
	if x != nil {
		return x.PreactivationRequired
	}
	return false
}

func (x *SubjectiveRestrictions) GetEarliestAllowedActivationTime() string {
	if x != nil {
		return x.EarliestAllowedActivationTime
	}
	return ""
}

type Specification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Specification) Reset() {
	*x = Specification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specification) ProtoMessage() {}

func (x *Specification) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specification.ProtoReflect.Descriptor instead.
func (*Specification) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{63}
}

func (x *Specification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Specification) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// AccountCreation represents the time and place where an account was created on an EOSIO chain. The block referenced is expected to be irreversible.
type AccountCreationRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account being created
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// Account that created the `account`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// At which block number this happened
	BlockNum uint64 `protobuf:"varint,3,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	// At which block ID this happened
	BlockId       string                 `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	TransactionId string                 `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *AccountCreationRef) Reset() {
	*x = AccountCreationRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCreationRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCreationRef) ProtoMessage() {}

func (x *AccountCreationRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCreationRef.ProtoReflect.Descriptor instead.
func (*AccountCreationRef) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{64}
}

func (x *AccountCreationRef) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountCreationRef) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *AccountCreationRef) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *AccountCreationRef) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *AccountCreationRef) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *AccountCreationRef) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// HeaderOnlyBlock is used to optimally unpack the [Block] structure (note the
// corresponding message number for the `header` field) while consuming less
// memory, when only the `header` is desired.
//
// WARN: this is a client-side optimization pattern and should be moved in the
// consuming code.
type HeaderOnlyBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the block's hash.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Number is the block's height at which this block was mined.
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// Header contain's the block's header information like its parent hash, the merkel root hash
	// and all other information the form a block.
	Header *BlockHeader `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	// A blockroot Merkle tree is a data structure that uses hash functions to organize and
	// verify the integrity of data blocks in a blockchain.
	// Each leaf node contains a hash of a data block, while each non-leaf node contains the hash of its child nodes.
	// The root node contains a single hash that represents all the data in the tree,
	// allowing for efficient verification of data integrity by only checking the root hash.
	BlockrootMerkle *BlockRootMerkle `protobuf:"bytes,11,opt,name=blockroot_merkle,json=blockrootMerkle,proto3" json:"blockroot_merkle,omitempty"`
}

func (x *HeaderOnlyBlock) Reset() {
	*x = HeaderOnlyBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderOnlyBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderOnlyBlock) ProtoMessage() {}

func (x *HeaderOnlyBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderOnlyBlock.ProtoReflect.Descriptor instead.
func (*HeaderOnlyBlock) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{65}
}

func (x *HeaderOnlyBlock) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HeaderOnlyBlock) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *HeaderOnlyBlock) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HeaderOnlyBlock) GetBlockrootMerkle() *BlockRootMerkle {
	if x != nil {
		return x.BlockrootMerkle
	}
	return nil
}

type TransactionTraceWithBlockRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trace    *TransactionTrace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	BlockRef *BlockRef         `protobuf:"bytes,2,opt,name=block_ref,json=blockRef,proto3" json:"block_ref,omitempty"`
}

func (x *TransactionTraceWithBlockRef) Reset() {
	*x = TransactionTraceWithBlockRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionTraceWithBlockRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionTraceWithBlockRef) ProtoMessage() {}

func (x *TransactionTraceWithBlockRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionTraceWithBlockRef.ProtoReflect.Descriptor instead.
func (*TransactionTraceWithBlockRef) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{66}
}

func (x *TransactionTraceWithBlockRef) GetTrace() *TransactionTrace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TransactionTraceWithBlockRef) GetBlockRef() *BlockRef {
	if x != nil {
		return x.BlockRef
	}
	return nil
}

type BlockRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Number uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *BlockRef) Reset() {
	*x = BlockRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRef) ProtoMessage() {}

func (x *BlockRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRef.ProtoReflect.Descriptor instead.
func (*BlockRef) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{67}
}

func (x *BlockRef) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockRef) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

// This is an implicit transaction, like `onblock` and `onerror` that is extracted
// separately from the block itself.
// TODO: does it have a receipt? It probably has
type TransactionEvent_AddedInternally struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *SignedTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionEvent_AddedInternally) Reset() {
	*x = TransactionEvent_AddedInternally{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEvent_AddedInternally) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEvent_AddedInternally) ProtoMessage() {}

func (x *TransactionEvent_AddedInternally) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEvent_AddedInternally.ProtoReflect.Descriptor instead.
func (*TransactionEvent_AddedInternally) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TransactionEvent_AddedInternally) GetTransaction() *SignedTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// This is the transaction that is added into a block, in the list of transactions there.
type TransactionEvent_Added struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt     *TransactionReceipt `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Transaction *SignedTransaction  `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	PublicKeys  *PublicKeys         `protobuf:"bytes,3,opt,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
}

func (x *TransactionEvent_Added) Reset() {
	*x = TransactionEvent_Added{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEvent_Added) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEvent_Added) ProtoMessage() {}

func (x *TransactionEvent_Added) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEvent_Added.ProtoReflect.Descriptor instead.
func (*TransactionEvent_Added) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{20, 1}
}

func (x *TransactionEvent_Added) GetReceipt() *TransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *TransactionEvent_Added) GetTransaction() *SignedTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionEvent_Added) GetPublicKeys() *PublicKeys {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

// Executed contributes the traces of executions
type TransactionEvent_Executed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trace       *TransactionTrace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	BlockHeader *BlockHeader      `protobuf:"bytes,2,opt,name=blockHeader,proto3" json:"blockHeader,omitempty"`
}

func (x *TransactionEvent_Executed) Reset() {
	*x = TransactionEvent_Executed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEvent_Executed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEvent_Executed) ProtoMessage() {}

func (x *TransactionEvent_Executed) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEvent_Executed.ProtoReflect.Descriptor instead.
func (*TransactionEvent_Executed) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{20, 2}
}

func (x *TransactionEvent_Executed) GetTrace() *TransactionTrace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *TransactionEvent_Executed) GetBlockHeader() *BlockHeader {
	if x != nil {
		return x.BlockHeader
	}
	return nil
}

type TransactionEvent_DtrxScheduled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedBy   *ExtDTrxOp         `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Transaction *SignedTransaction `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionEvent_DtrxScheduled) Reset() {
	*x = TransactionEvent_DtrxScheduled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEvent_DtrxScheduled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEvent_DtrxScheduled) ProtoMessage() {}

func (x *TransactionEvent_DtrxScheduled) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEvent_DtrxScheduled.ProtoReflect.Descriptor instead.
func (*TransactionEvent_DtrxScheduled) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{20, 3}
}

func (x *TransactionEvent_DtrxScheduled) GetCreatedBy() *ExtDTrxOp {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *TransactionEvent_DtrxScheduled) GetTransaction() *SignedTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type TransactionEvent_DtrxCanceled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanceledBy *ExtDTrxOp `protobuf:"bytes,1,opt,name=canceled_by,json=canceledBy,proto3" json:"canceled_by,omitempty"`
}

func (x *TransactionEvent_DtrxCanceled) Reset() {
	*x = TransactionEvent_DtrxCanceled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEvent_DtrxCanceled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEvent_DtrxCanceled) ProtoMessage() {}

func (x *TransactionEvent_DtrxCanceled) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEvent_DtrxCanceled.ProtoReflect.Descriptor instead.
func (*TransactionEvent_DtrxCanceled) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{20, 4}
}

func (x *TransactionEvent_DtrxCanceled) GetCanceledBy() *ExtDTrxOp {
	if x != nil {
		return x.CanceledBy
	}
	return nil
}

type Exception_LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Exception_LogContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Format  string                `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// This is actually a Pair<string, any> in C++ which get serialized usually
	// as a JSON object. However, it seems some string sequences could be
	// invalid UTF-8 characters. As such, we decided to use a bytes array. Can
	// be interpreted as a UTF-8 string containing JSON, just be ready to
	// handle UTF-8 errors if they arise.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Exception_LogMessage) Reset() {
	*x = Exception_LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exception_LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exception_LogMessage) ProtoMessage() {}

func (x *Exception_LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exception_LogMessage.ProtoReflect.Descriptor instead.
func (*Exception_LogMessage) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{60, 0}
}

func (x *Exception_LogMessage) GetContext() *Exception_LogContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Exception_LogMessage) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Exception_LogMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Exception_LogContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      string                 `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	File       string                 `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Line       int32                  `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	Method     string                 `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Hostname   string                 `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ThreadName string                 `protobuf:"bytes,6,opt,name=thread_name,json=threadName,proto3" json:"thread_name,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Context    *Exception_LogContext  `protobuf:"bytes,8,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Exception_LogContext) Reset() {
	*x = Exception_LogContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_antelope_type_v1_type_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exception_LogContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exception_LogContext) ProtoMessage() {}

func (x *Exception_LogContext) ProtoReflect() protoreflect.Message {
	mi := &file_sf_antelope_type_v1_type_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exception_LogContext.ProtoReflect.Descriptor instead.
func (*Exception_LogContext) Descriptor() ([]byte, []int) {
	return file_sf_antelope_type_v1_type_proto_rawDescGZIP(), []int{60, 1}
}

func (x *Exception_LogContext) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Exception_LogContext) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Exception_LogContext) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Exception_LogContext) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Exception_LogContext) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Exception_LogContext) GetThreadName() string {
	if x != nil {
		return x.ThreadName
	}
	return ""
}

func (x *Exception_LogContext) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Exception_LogContext) GetContext() *Exception_LogContext {
	if x != nil {
		return x.Context
	}
	return nil
}

var File_sf_antelope_type_v1_type_proto protoreflect.FileDescriptor

var file_sf_antelope_type_v1_type_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x66, 0x2f, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x69, 0x0a,
	0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x05, 0x44, 0x42, 0x4f, 0x70,
	0x73, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x4f, 0x70, 0x52, 0x05, 0x64, 0x62,
	0x4f, 0x70, 0x73, 0x22, 0x8b, 0x16, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x23, 0x64, 0x70, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x20, 0x64, 0x70, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x49, 0x72,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6e,
	0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x70, 0x6f, 0x73, 0x49, 0x72, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d,
	0x12, 0x4f, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x12, 0x66, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x1c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x72, 0x62, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x6f,
	0x4c, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x52, 0x42, 0x52, 0x18,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6d,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x72, 0x62, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a,
	0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x19, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x6f, 0x70, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x52, 0x09, 0x72, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x16,
	0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x14,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x75, 0x6e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x23, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x52, 0x20, 0x75,
	0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x12,
	0x65, 0x0a, 0x21, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x52, 0x1e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x12, 0x69, 0x0a, 0x1d, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x1b, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x65, 0x0a, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x19, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x75, 0x6e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52,
	0x0a, 0x26, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22,
	0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x26, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x22, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x72, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x1c, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x56, 0x32, 0x12, 0x5c, 0x0a, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76,
	0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x5d, 0x0a, 0x2c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x27, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x4a, 0x04, 0x08, 0x12, 0x10,
	0x13, 0x22, 0x84, 0x03, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x60, 0x0a, 0x19, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e,
	0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x52, 0x17,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e,
	0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x72, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x81, 0x02,
	0x0a, 0x17, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x62,
	0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x31,
	0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x56,
	0x32, 0x22, 0x6c, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x22,
	0x5c, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x7b, 0x0a,
	0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x62, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x3e, 0x0a, 0x02, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x56, 0x30, 0x48, 0x00, 0x52, 0x02, 0x76, 0x30,
	0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x17, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x56, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x53, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x63, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x64, 0x22, 0x65, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x6f,
	0x4c, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x52, 0x42, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a,
	0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x03, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x73, 0x56, 0x31, 0x22, 0xfb, 0x09, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0f, 0x64, 0x74, 0x72, 0x78, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x74, 0x72, 0x78, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x74, 0x72, 0x78, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x11, 0x64, 0x74, 0x72, 0x78, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x74, 0x72, 0x78, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x64, 0x74, 0x72, 0x78, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5b, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x48, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd6, 0x01, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61,
	0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73,
	0x1a, 0x8b, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x98,
	0x01, 0x0a, 0x0d, 0x44, 0x74, 0x72, 0x78, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x44, 0x54,
	0x72, 0x78, 0x4f, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x48, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4f, 0x0a, 0x0c, 0x44, 0x74, 0x72,
	0x78, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x44, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x52, 0x0a,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0x9d, 0x06, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x44, 0x54, 0x72,
	0x78, 0x4f, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3f,
	0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x44, 0x54, 0x72,
	0x78, 0x4f, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x33, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x72, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x18, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x72, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x16,
	0x10, 0x21, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x46, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x93, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e,
	0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e,
	0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92,
	0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2d,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x65, 0x63, 0x22, 0x88, 0x09, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x12, 0x45, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x64, 0x74, 0x72, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x44, 0x74, 0x72, 0x78, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x70,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42,
	0x4f, 0x70, 0x52, 0x05, 0x64, 0x62, 0x4f, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x74, 0x72,
	0x78, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x52, 0x07, 0x64, 0x74, 0x72, 0x78, 0x4f, 0x70,
	0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f,
	0x70, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x4f,
	0x70, 0x52, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x4f, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x61,
	0x6d, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x41, 0x4d, 0x4f, 0x70, 0x52, 0x06, 0x72, 0x61, 0x6d, 0x4f, 0x70, 0x73, 0x12,
	0x52, 0x0a, 0x12, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x41, 0x4d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x52, 0x10, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x52, 0x09, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70,
	0x73, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x4a, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x4a, 0x04, 0x08, 0x1e, 0x10, 0x1f, 0x22, 0xb9,
	0x01, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x08, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x41, 0x4d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x2a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x26, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x52,
	0x0a, 0x26, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4a, 0x04, 0x08, 0x28, 0x10, 0x29, 0x22, 0xa1, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x62, 0x69,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x61, 0x62, 0x69, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x0c,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x41, 0x4d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x3e,
	0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x33,
	0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8a, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x12, 0x42, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x22, 0xf4, 0x03, 0x0a, 0x04, 0x44, 0x42, 0x4f, 0x70, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x42, 0x4f, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6c, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f,
	0x6e, 0x22, 0x64, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x03, 0x22, 0xe2, 0x0c, 0x0a, 0x05, 0x52, 0x41, 0x4d, 0x4f,
	0x70, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x41, 0x4d, 0x4f, 0x70,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x41, 0x4d, 0x4f, 0x70, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x41, 0x4d, 0x4f, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x82, 0x07, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x58, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x45, 0x44, 0x5f, 0x54, 0x52, 0x58, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46,
	0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x58, 0x5f, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x58, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x41, 0x55, 0x54, 0x48, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x41, 0x55, 0x54, 0x48, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45,
	0x57, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x0b, 0x12,
	0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x0c, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x41,
	0x59, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4f,
	0x4c, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x10, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x11, 0x12,
	0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x41, 0x59, 0x45,
	0x52, 0x10, 0x12, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4f,
	0x4c, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x45, 0x52, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x41, 0x42, 0x49, 0x10, 0x14,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x54, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x41, 0x55, 0x54, 0x48, 0x10,
	0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x19, 0x22, 0xfc, 0x01,
	0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x41, 0x42, 0x49, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52,
	0x52, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x58, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x52, 0x4f, 0x57, 0x10, 0x09, 0x22, 0x04, 0x08, 0x0a, 0x10, 0x0a, 0x22, 0x8d, 0x01, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x22, 0x81, 0x01, 0x0a,
	0x0f, 0x52, 0x41, 0x4d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x22, 0xa1, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x12, 0x44, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x10, 0x02, 0x22, 0xd1, 0x04, 0x0a, 0x06, 0x44, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x12,
	0x43, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a,
	0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x06, 0x22, 0xe8, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x74,
	0x44, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x64, 0x74, 0x72, 0x78, 0x5f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x54, 0x72, 0x78, 0x4f, 0x70, 0x52, 0x06, 0x64, 0x74, 0x72,
	0x78, 0x4f, 0x70, 0x22, 0xe5, 0x01, 0x0a, 0x09, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xda, 0x02, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x6d,
	0x4f, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x4f, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x08, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x22, 0x64,
	0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x10, 0x03, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7d, 0x0a,
	0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x22, 0xdc, 0x01, 0x0a,
	0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x05, 0x77, 0x61, 0x69, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x09, 0x4b,
	0x65, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x47, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x3f, 0x0a, 0x0a, 0x57, 0x61, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xc3, 0x03, 0x0a, 0x08, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x12, 0x45, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x4e,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e,
	0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x42, 0x06,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xf5, 0x03, 0x0a, 0x0b, 0x52, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x14,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x14, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x70,
	0x75, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x70,
	0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xdc,
	0x02, 0x0a, 0x0c, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5d, 0x0a, 0x14, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x63, 0x70, 0x75, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5d,
	0x0a, 0x14, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a,
	0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xa0, 0x01,
	0x0a, 0x13, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x70, 0x75, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0xcf, 0x01, 0x0a, 0x12, 0x52, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x09, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x6c, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x22, 0x81, 0x02, 0x0a, 0x16, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xae, 0x04,
	0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0x7d,
	0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x9e, 0x02,
	0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xe7,
	0x02, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x16, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48,
	0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x16, 0x70, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d,
	0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x39, 0x0a,
	0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc4, 0x01,
	0x0a, 0x0f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61,
	0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6e, 0x74, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x66, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x22, 0x36,
	0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0xba, 0x01, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x52, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x52, 0x45, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x59, 0x42, 0x45, 0x53, 0x54, 0x41, 0x4c,
	0x45, 0x10, 0x04, 0x2a, 0x8c, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x07, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x66,
	0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x61, 0x6e, 0x74,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62,
	0x61, 0x6e, 0x74, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_antelope_type_v1_type_proto_rawDescOnce sync.Once
	file_sf_antelope_type_v1_type_proto_rawDescData = file_sf_antelope_type_v1_type_proto_rawDesc
)

func file_sf_antelope_type_v1_type_proto_rawDescGZIP() []byte {
	file_sf_antelope_type_v1_type_proto_rawDescOnce.Do(func() {
		file_sf_antelope_type_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_antelope_type_v1_type_proto_rawDescData)
	})
	return file_sf_antelope_type_v1_type_proto_rawDescData
}

var file_sf_antelope_type_v1_type_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_sf_antelope_type_v1_type_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_sf_antelope_type_v1_type_proto_goTypes = []interface{}{
	(BlockReversibility)(0),                  // 0: sf.antelope.type.v1.BlockReversibility
	(TransactionStatus)(0),                   // 1: sf.antelope.type.v1.TransactionStatus
	(TrxOp_Operation)(0),                     // 2: sf.antelope.type.v1.TrxOp.Operation
	(DBOp_Operation)(0),                      // 3: sf.antelope.type.v1.DBOp.Operation
	(RAMOp_Operation)(0),                     // 4: sf.antelope.type.v1.RAMOp.Operation
	(RAMOp_Namespace)(0),                     // 5: sf.antelope.type.v1.RAMOp.Namespace
	(RAMOp_Action)(0),                        // 6: sf.antelope.type.v1.RAMOp.Action
	(TableOp_Operation)(0),                   // 7: sf.antelope.type.v1.TableOp.Operation
	(DTrxOp_Operation)(0),                    // 8: sf.antelope.type.v1.DTrxOp.Operation
	(FeatureOp_Kind)(0),                      // 9: sf.antelope.type.v1.FeatureOp.Kind
	(PermOp_Operation)(0),                    // 10: sf.antelope.type.v1.PermOp.Operation
	(RlimitOp_Operation)(0),                  // 11: sf.antelope.type.v1.RlimitOp.Operation
	(*ActionTraces)(nil),                     // 12: sf.antelope.type.v1.ActionTraces
	(*TransactionTraces)(nil),                // 13: sf.antelope.type.v1.TransactionTraces
	(*DBOps)(nil),                            // 14: sf.antelope.type.v1.DBOps
	(*Block)(nil),                            // 15: sf.antelope.type.v1.Block
	(*BlockWithRefs)(nil),                    // 16: sf.antelope.type.v1.BlockWithRefs
	(*TransactionRefs)(nil),                  // 17: sf.antelope.type.v1.TransactionRefs
	(*ActivatedProtocolFeatures)(nil),        // 18: sf.antelope.type.v1.ActivatedProtocolFeatures
	(*PendingProducerSchedule)(nil),          // 19: sf.antelope.type.v1.PendingProducerSchedule
	(*ProducerSchedule)(nil),                 // 20: sf.antelope.type.v1.ProducerSchedule
	(*ProducerKey)(nil),                      // 21: sf.antelope.type.v1.ProducerKey
	(*ProducerAuthoritySchedule)(nil),        // 22: sf.antelope.type.v1.ProducerAuthoritySchedule
	(*ProducerAuthority)(nil),                // 23: sf.antelope.type.v1.ProducerAuthority
	(*BlockSigningAuthority)(nil),            // 24: sf.antelope.type.v1.BlockSigningAuthority
	(*BlockSigningAuthorityV0)(nil),          // 25: sf.antelope.type.v1.BlockSigningAuthorityV0
	(*BlockRootMerkle)(nil),                  // 26: sf.antelope.type.v1.BlockRootMerkle
	(*ProducerToLastProduced)(nil),           // 27: sf.antelope.type.v1.ProducerToLastProduced
	(*ProducerToLastImpliedIRB)(nil),         // 28: sf.antelope.type.v1.ProducerToLastImpliedIRB
	(*TransactionReceipt)(nil),               // 29: sf.antelope.type.v1.TransactionReceipt
	(*PackedTransaction)(nil),                // 30: sf.antelope.type.v1.PackedTransaction
	(*BlockHeader)(nil),                      // 31: sf.antelope.type.v1.BlockHeader
	(*TransactionEvent)(nil),                 // 32: sf.antelope.type.v1.TransactionEvent
	(*PublicKeys)(nil),                       // 33: sf.antelope.type.v1.PublicKeys
	(*TransactionLifecycle)(nil),             // 34: sf.antelope.type.v1.TransactionLifecycle
	(*SignedTransaction)(nil),                // 35: sf.antelope.type.v1.SignedTransaction
	(*Transaction)(nil),                      // 36: sf.antelope.type.v1.Transaction
	(*TransactionHeader)(nil),                // 37: sf.antelope.type.v1.TransactionHeader
	(*TransactionTrace)(nil),                 // 38: sf.antelope.type.v1.TransactionTrace
	(*TransactionReceiptHeader)(nil),         // 39: sf.antelope.type.v1.TransactionReceiptHeader
	(*Action)(nil),                           // 40: sf.antelope.type.v1.Action
	(*ActionTrace)(nil),                      // 41: sf.antelope.type.v1.ActionTrace
	(*ActionReceipt)(nil),                    // 42: sf.antelope.type.v1.ActionReceipt
	(*AuthSequence)(nil),                     // 43: sf.antelope.type.v1.AuthSequence
	(*AccountRAMDelta)(nil),                  // 44: sf.antelope.type.v1.AccountRAMDelta
	(*AccountDelta)(nil),                     // 45: sf.antelope.type.v1.AccountDelta
	(*Extension)(nil),                        // 46: sf.antelope.type.v1.Extension
	(*TrxOp)(nil),                            // 47: sf.antelope.type.v1.TrxOp
	(*DBOp)(nil),                             // 48: sf.antelope.type.v1.DBOp
	(*RAMOp)(nil),                            // 49: sf.antelope.type.v1.RAMOp
	(*RAMCorrectionOp)(nil),                  // 50: sf.antelope.type.v1.RAMCorrectionOp
	(*TableOp)(nil),                          // 51: sf.antelope.type.v1.TableOp
	(*DTrxOp)(nil),                           // 52: sf.antelope.type.v1.DTrxOp
	(*ExtDTrxOp)(nil),                        // 53: sf.antelope.type.v1.ExtDTrxOp
	(*FeatureOp)(nil),                        // 54: sf.antelope.type.v1.FeatureOp
	(*CreationFlatNode)(nil),                 // 55: sf.antelope.type.v1.CreationFlatNode
	(*PermOp)(nil),                           // 56: sf.antelope.type.v1.PermOp
	(*PermissionObject)(nil),                 // 57: sf.antelope.type.v1.PermissionObject
	(*Permission)(nil),                       // 58: sf.antelope.type.v1.Permission
	(*Authority)(nil),                        // 59: sf.antelope.type.v1.Authority
	(*KeyWeight)(nil),                        // 60: sf.antelope.type.v1.KeyWeight
	(*PermissionLevel)(nil),                  // 61: sf.antelope.type.v1.PermissionLevel
	(*PermissionLevelWeight)(nil),            // 62: sf.antelope.type.v1.PermissionLevelWeight
	(*WaitWeight)(nil),                       // 63: sf.antelope.type.v1.WaitWeight
	(*RlimitOp)(nil),                         // 64: sf.antelope.type.v1.RlimitOp
	(*RlimitState)(nil),                      // 65: sf.antelope.type.v1.RlimitState
	(*RlimitConfig)(nil),                     // 66: sf.antelope.type.v1.RlimitConfig
	(*RlimitAccountLimits)(nil),              // 67: sf.antelope.type.v1.RlimitAccountLimits
	(*RlimitAccountUsage)(nil),               // 68: sf.antelope.type.v1.RlimitAccountUsage
	(*UsageAccumulator)(nil),                 // 69: sf.antelope.type.v1.UsageAccumulator
	(*ElasticLimitParameters)(nil),           // 70: sf.antelope.type.v1.ElasticLimitParameters
	(*Ratio)(nil),                            // 71: sf.antelope.type.v1.Ratio
	(*Exception)(nil),                        // 72: sf.antelope.type.v1.Exception
	(*Feature)(nil),                          // 73: sf.antelope.type.v1.Feature
	(*SubjectiveRestrictions)(nil),           // 74: sf.antelope.type.v1.SubjectiveRestrictions
	(*Specification)(nil),                    // 75: sf.antelope.type.v1.Specification
	(*AccountCreationRef)(nil),               // 76: sf.antelope.type.v1.AccountCreationRef
	(*HeaderOnlyBlock)(nil),                  // 77: sf.antelope.type.v1.HeaderOnlyBlock
	(*TransactionTraceWithBlockRef)(nil),     // 78: sf.antelope.type.v1.TransactionTraceWithBlockRef
	(*BlockRef)(nil),                         // 79: sf.antelope.type.v1.BlockRef
	(*TransactionEvent_AddedInternally)(nil), // 80: sf.antelope.type.v1.TransactionEvent.AddedInternally
	(*TransactionEvent_Added)(nil),           // 81: sf.antelope.type.v1.TransactionEvent.Added
	(*TransactionEvent_Executed)(nil),        // 82: sf.antelope.type.v1.TransactionEvent.Executed
	(*TransactionEvent_DtrxScheduled)(nil),   // 83: sf.antelope.type.v1.TransactionEvent.DtrxScheduled
	(*TransactionEvent_DtrxCanceled)(nil),    // 84: sf.antelope.type.v1.TransactionEvent.DtrxCanceled
	(*Exception_LogMessage)(nil),             // 85: sf.antelope.type.v1.Exception.LogMessage
	(*Exception_LogContext)(nil),             // 86: sf.antelope.type.v1.Exception.LogContext
	(*timestamppb.Timestamp)(nil),            // 87: google.protobuf.Timestamp
}
var file_sf_antelope_type_v1_type_proto_depIdxs = []int32{
	41,  // 0: sf.antelope.type.v1.ActionTraces.action_traces:type_name -> sf.antelope.type.v1.ActionTrace
	38,  // 1: sf.antelope.type.v1.TransactionTraces.transaction_traces:type_name -> sf.antelope.type.v1.TransactionTrace
	48,  // 2: sf.antelope.type.v1.DBOps.db_ops:type_name -> sf.antelope.type.v1.DBOp
	31,  // 3: sf.antelope.type.v1.Block.header:type_name -> sf.antelope.type.v1.BlockHeader
	46,  // 4: sf.antelope.type.v1.Block.block_extensions:type_name -> sf.antelope.type.v1.Extension
	26,  // 5: sf.antelope.type.v1.Block.blockroot_merkle:type_name -> sf.antelope.type.v1.BlockRootMerkle
	27,  // 6: sf.antelope.type.v1.Block.producer_to_last_produced:type_name -> sf.antelope.type.v1.ProducerToLastProduced
	28,  // 7: sf.antelope.type.v1.Block.producer_to_last_implied_irb:type_name -> sf.antelope.type.v1.ProducerToLastImpliedIRB
	19,  // 8: sf.antelope.type.v1.Block.pending_schedule:type_name -> sf.antelope.type.v1.PendingProducerSchedule
	18,  // 9: sf.antelope.type.v1.Block.activated_protocol_features:type_name -> sf.antelope.type.v1.ActivatedProtocolFeatures
	64,  // 10: sf.antelope.type.v1.Block.rlimit_ops:type_name -> sf.antelope.type.v1.RlimitOp
	29,  // 11: sf.antelope.type.v1.Block.unfiltered_transactions:type_name -> sf.antelope.type.v1.TransactionReceipt
	29,  // 12: sf.antelope.type.v1.Block.filtered_transactions:type_name -> sf.antelope.type.v1.TransactionReceipt
	47,  // 13: sf.antelope.type.v1.Block.unfiltered_implicit_transaction_ops:type_name -> sf.antelope.type.v1.TrxOp
	47,  // 14: sf.antelope.type.v1.Block.filtered_implicit_transaction_ops:type_name -> sf.antelope.type.v1.TrxOp
	38,  // 15: sf.antelope.type.v1.Block.unfiltered_transaction_traces:type_name -> sf.antelope.type.v1.TransactionTrace
	38,  // 16: sf.antelope.type.v1.Block.filtered_transaction_traces:type_name -> sf.antelope.type.v1.TransactionTrace
	20,  // 17: sf.antelope.type.v1.Block.active_schedule_v1:type_name -> sf.antelope.type.v1.ProducerSchedule
	24,  // 18: sf.antelope.type.v1.Block.valid_block_signing_authority_v2:type_name -> sf.antelope.type.v1.BlockSigningAuthority
	22,  // 19: sf.antelope.type.v1.Block.active_schedule_v2:type_name -> sf.antelope.type.v1.ProducerAuthoritySchedule
	15,  // 20: sf.antelope.type.v1.BlockWithRefs.block:type_name -> sf.antelope.type.v1.Block
	17,  // 21: sf.antelope.type.v1.BlockWithRefs.implicit_transaction_refs:type_name -> sf.antelope.type.v1.TransactionRefs
	17,  // 22: sf.antelope.type.v1.BlockWithRefs.transaction_refs:type_name -> sf.antelope.type.v1.TransactionRefs
	17,  // 23: sf.antelope.type.v1.BlockWithRefs.transaction_trace_refs:type_name -> sf.antelope.type.v1.TransactionRefs
	20,  // 24: sf.antelope.type.v1.PendingProducerSchedule.schedule_v1:type_name -> sf.antelope.type.v1.ProducerSchedule
	22,  // 25: sf.antelope.type.v1.PendingProducerSchedule.schedule_v2:type_name -> sf.antelope.type.v1.ProducerAuthoritySchedule
	21,  // 26: sf.antelope.type.v1.ProducerSchedule.producers:type_name -> sf.antelope.type.v1.ProducerKey
	23,  // 27: sf.antelope.type.v1.ProducerAuthoritySchedule.producers:type_name -> sf.antelope.type.v1.ProducerAuthority
	24,  // 28: sf.antelope.type.v1.ProducerAuthority.block_signing_authority:type_name -> sf.antelope.type.v1.BlockSigningAuthority
	25,  // 29: sf.antelope.type.v1.BlockSigningAuthority.v0:type_name -> sf.antelope.type.v1.BlockSigningAuthorityV0
	60,  // 30: sf.antelope.type.v1.BlockSigningAuthorityV0.keys:type_name -> sf.antelope.type.v1.KeyWeight
	1,   // 31: sf.antelope.type.v1.TransactionReceipt.status:type_name -> sf.antelope.type.v1.TransactionStatus
	30,  // 32: sf.antelope.type.v1.TransactionReceipt.packed_transaction:type_name -> sf.antelope.type.v1.PackedTransaction
	87,  // 33: sf.antelope.type.v1.BlockHeader.timestamp:type_name -> google.protobuf.Timestamp
	46,  // 34: sf.antelope.type.v1.BlockHeader.header_extensions:type_name -> sf.antelope.type.v1.Extension
	20,  // 35: sf.antelope.type.v1.BlockHeader.new_producers_v1:type_name -> sf.antelope.type.v1.ProducerSchedule
	80,  // 36: sf.antelope.type.v1.TransactionEvent.internal_addition:type_name -> sf.antelope.type.v1.TransactionEvent.AddedInternally
	81,  // 37: sf.antelope.type.v1.TransactionEvent.addition:type_name -> sf.antelope.type.v1.TransactionEvent.Added
	82,  // 38: sf.antelope.type.v1.TransactionEvent.execution:type_name -> sf.antelope.type.v1.TransactionEvent.Executed
	83,  // 39: sf.antelope.type.v1.TransactionEvent.dtrx_scheduling:type_name -> sf.antelope.type.v1.TransactionEvent.DtrxScheduled
	84,  // 40: sf.antelope.type.v1.TransactionEvent.dtrx_cancellation:type_name -> sf.antelope.type.v1.TransactionEvent.DtrxCanceled
	1,   // 41: sf.antelope.type.v1.TransactionLifecycle.transaction_status:type_name -> sf.antelope.type.v1.TransactionStatus
	29,  // 42: sf.antelope.type.v1.TransactionLifecycle.transaction_receipt:type_name -> sf.antelope.type.v1.TransactionReceipt
	35,  // 43: sf.antelope.type.v1.TransactionLifecycle.transaction:type_name -> sf.antelope.type.v1.SignedTransaction
	38,  // 44: sf.antelope.type.v1.TransactionLifecycle.execution_trace:type_name -> sf.antelope.type.v1.TransactionTrace
	31,  // 45: sf.antelope.type.v1.TransactionLifecycle.execution_block_header:type_name -> sf.antelope.type.v1.BlockHeader
	53,  // 46: sf.antelope.type.v1.TransactionLifecycle.created_by:type_name -> sf.antelope.type.v1.ExtDTrxOp
	53,  // 47: sf.antelope.type.v1.TransactionLifecycle.canceled_by:type_name -> sf.antelope.type.v1.ExtDTrxOp
	36,  // 48: sf.antelope.type.v1.SignedTransaction.transaction:type_name -> sf.antelope.type.v1.Transaction
	37,  // 49: sf.antelope.type.v1.Transaction.header:type_name -> sf.antelope.type.v1.TransactionHeader
	40,  // 50: sf.antelope.type.v1.Transaction.context_free_actions:type_name -> sf.antelope.type.v1.Action
	40,  // 51: sf.antelope.type.v1.Transaction.actions:type_name -> sf.antelope.type.v1.Action
	46,  // 52: sf.antelope.type.v1.Transaction.extensions:type_name -> sf.antelope.type.v1.Extension
	87,  // 53: sf.antelope.type.v1.TransactionHeader.expiration:type_name -> google.protobuf.Timestamp
	87,  // 54: sf.antelope.type.v1.TransactionTrace.block_time:type_name -> google.protobuf.Timestamp
	39,  // 55: sf.antelope.type.v1.TransactionTrace.receipt:type_name -> sf.antelope.type.v1.TransactionReceiptHeader
	41,  // 56: sf.antelope.type.v1.TransactionTrace.action_traces:type_name -> sf.antelope.type.v1.ActionTrace
	38,  // 57: sf.antelope.type.v1.TransactionTrace.failed_dtrx_trace:type_name -> sf.antelope.type.v1.TransactionTrace
	72,  // 58: sf.antelope.type.v1.TransactionTrace.exception:type_name -> sf.antelope.type.v1.Exception
	48,  // 59: sf.antelope.type.v1.TransactionTrace.db_ops:type_name -> sf.antelope.type.v1.DBOp
	52,  // 60: sf.antelope.type.v1.TransactionTrace.dtrx_ops:type_name -> sf.antelope.type.v1.DTrxOp
	54,  // 61: sf.antelope.type.v1.TransactionTrace.feature_ops:type_name -> sf.antelope.type.v1.FeatureOp
	56,  // 62: sf.antelope.type.v1.TransactionTrace.perm_ops:type_name -> sf.antelope.type.v1.PermOp
	49,  // 63: sf.antelope.type.v1.TransactionTrace.ram_ops:type_name -> sf.antelope.type.v1.RAMOp
	50,  // 64: sf.antelope.type.v1.TransactionTrace.ram_correction_ops:type_name -> sf.antelope.type.v1.RAMCorrectionOp
	64,  // 65: sf.antelope.type.v1.TransactionTrace.rlimit_ops:type_name -> sf.antelope.type.v1.RlimitOp
	51,  // 66: sf.antelope.type.v1.TransactionTrace.table_ops:type_name -> sf.antelope.type.v1.TableOp
	55,  // 67: sf.antelope.type.v1.TransactionTrace.creation_tree:type_name -> sf.antelope.type.v1.CreationFlatNode
	1,   // 68: sf.antelope.type.v1.TransactionReceiptHeader.status:type_name -> sf.antelope.type.v1.TransactionStatus
	61,  // 69: sf.antelope.type.v1.Action.authorization:type_name -> sf.antelope.type.v1.PermissionLevel
	42,  // 70: sf.antelope.type.v1.ActionTrace.receipt:type_name -> sf.antelope.type.v1.ActionReceipt
	40,  // 71: sf.antelope.type.v1.ActionTrace.action:type_name -> sf.antelope.type.v1.Action
	87,  // 72: sf.antelope.type.v1.ActionTrace.block_time:type_name -> google.protobuf.Timestamp
	44,  // 73: sf.antelope.type.v1.ActionTrace.account_ram_deltas:type_name -> sf.antelope.type.v1.AccountRAMDelta
	72,  // 74: sf.antelope.type.v1.ActionTrace.exception:type_name -> sf.antelope.type.v1.Exception
	43,  // 75: sf.antelope.type.v1.ActionReceipt.auth_sequence:type_name -> sf.antelope.type.v1.AuthSequence
	2,   // 76: sf.antelope.type.v1.TrxOp.operation:type_name -> sf.antelope.type.v1.TrxOp.Operation
	35,  // 77: sf.antelope.type.v1.TrxOp.transaction:type_name -> sf.antelope.type.v1.SignedTransaction
	3,   // 78: sf.antelope.type.v1.DBOp.operation:type_name -> sf.antelope.type.v1.DBOp.Operation
	4,   // 79: sf.antelope.type.v1.RAMOp.operation:type_name -> sf.antelope.type.v1.RAMOp.Operation
	5,   // 80: sf.antelope.type.v1.RAMOp.namespace:type_name -> sf.antelope.type.v1.RAMOp.Namespace
	6,   // 81: sf.antelope.type.v1.RAMOp.action:type_name -> sf.antelope.type.v1.RAMOp.Action
	7,   // 82: sf.antelope.type.v1.TableOp.operation:type_name -> sf.antelope.type.v1.TableOp.Operation
	8,   // 83: sf.antelope.type.v1.DTrxOp.operation:type_name -> sf.antelope.type.v1.DTrxOp.Operation
	35,  // 84: sf.antelope.type.v1.DTrxOp.transaction:type_name -> sf.antelope.type.v1.SignedTransaction
	87,  // 85: sf.antelope.type.v1.ExtDTrxOp.block_time:type_name -> google.protobuf.Timestamp
	52,  // 86: sf.antelope.type.v1.ExtDTrxOp.dtrx_op:type_name -> sf.antelope.type.v1.DTrxOp
	73,  // 87: sf.antelope.type.v1.FeatureOp.feature:type_name -> sf.antelope.type.v1.Feature
	10,  // 88: sf.antelope.type.v1.PermOp.operation:type_name -> sf.antelope.type.v1.PermOp.Operation
	57,  // 89: sf.antelope.type.v1.PermOp.old_perm:type_name -> sf.antelope.type.v1.PermissionObject
	57,  // 90: sf.antelope.type.v1.PermOp.new_perm:type_name -> sf.antelope.type.v1.PermissionObject
	87,  // 91: sf.antelope.type.v1.PermissionObject.last_updated:type_name -> google.protobuf.Timestamp
	59,  // 92: sf.antelope.type.v1.PermissionObject.authority:type_name -> sf.antelope.type.v1.Authority
	59,  // 93: sf.antelope.type.v1.Permission.required_auth:type_name -> sf.antelope.type.v1.Authority
	60,  // 94: sf.antelope.type.v1.Authority.keys:type_name -> sf.antelope.type.v1.KeyWeight
	62,  // 95: sf.antelope.type.v1.Authority.accounts:type_name -> sf.antelope.type.v1.PermissionLevelWeight
	63,  // 96: sf.antelope.type.v1.Authority.waits:type_name -> sf.antelope.type.v1.WaitWeight
	61,  // 97: sf.antelope.type.v1.PermissionLevelWeight.permission:type_name -> sf.antelope.type.v1.PermissionLevel
	11,  // 98: sf.antelope.type.v1.RlimitOp.operation:type_name -> sf.antelope.type.v1.RlimitOp.Operation
	65,  // 99: sf.antelope.type.v1.RlimitOp.state:type_name -> sf.antelope.type.v1.RlimitState
	66,  // 100: sf.antelope.type.v1.RlimitOp.config:type_name -> sf.antelope.type.v1.RlimitConfig
	67,  // 101: sf.antelope.type.v1.RlimitOp.account_limits:type_name -> sf.antelope.type.v1.RlimitAccountLimits
	68,  // 102: sf.antelope.type.v1.RlimitOp.account_usage:type_name -> sf.antelope.type.v1.RlimitAccountUsage
	69,  // 103: sf.antelope.type.v1.RlimitState.average_block_net_usage:type_name -> sf.antelope.type.v1.UsageAccumulator
	69,  // 104: sf.antelope.type.v1.RlimitState.average_block_cpu_usage:type_name -> sf.antelope.type.v1.UsageAccumulator
	70,  // 105: sf.antelope.type.v1.RlimitConfig.cpu_limit_parameters:type_name -> sf.antelope.type.v1.ElasticLimitParameters
	70,  // 106: sf.antelope.type.v1.RlimitConfig.net_limit_parameters:type_name -> sf.antelope.type.v1.ElasticLimitParameters
	69,  // 107: sf.antelope.type.v1.RlimitAccountUsage.net_usage:type_name -> sf.antelope.type.v1.UsageAccumulator
	69,  // 108: sf.antelope.type.v1.RlimitAccountUsage.cpu_usage:type_name -> sf.antelope.type.v1.UsageAccumulator
	71,  // 109: sf.antelope.type.v1.ElasticLimitParameters.contract_rate:type_name -> sf.antelope.type.v1.Ratio
	71,  // 110: sf.antelope.type.v1.ElasticLimitParameters.expand_rate:type_name -> sf.antelope.type.v1.Ratio
	85,  // 111: sf.antelope.type.v1.Exception.stack:type_name -> sf.antelope.type.v1.Exception.LogMessage
	74,  // 112: sf.antelope.type.v1.Feature.subjective_restrictions:type_name -> sf.antelope.type.v1.SubjectiveRestrictions
	75,  // 113: sf.antelope.type.v1.Feature.specification:type_name -> sf.antelope.type.v1.Specification
	87,  // 114: sf.antelope.type.v1.AccountCreationRef.block_time:type_name -> google.protobuf.Timestamp
	31,  // 115: sf.antelope.type.v1.HeaderOnlyBlock.header:type_name -> sf.antelope.type.v1.BlockHeader
	26,  // 116: sf.antelope.type.v1.HeaderOnlyBlock.blockroot_merkle:type_name -> sf.antelope.type.v1.BlockRootMerkle
	38,  // 117: sf.antelope.type.v1.TransactionTraceWithBlockRef.trace:type_name -> sf.antelope.type.v1.TransactionTrace
	79,  // 118: sf.antelope.type.v1.TransactionTraceWithBlockRef.block_ref:type_name -> sf.antelope.type.v1.BlockRef
	35,  // 119: sf.antelope.type.v1.TransactionEvent.AddedInternally.transaction:type_name -> sf.antelope.type.v1.SignedTransaction
	29,  // 120: sf.antelope.type.v1.TransactionEvent.Added.receipt:type_name -> sf.antelope.type.v1.TransactionReceipt
	35,  // 121: sf.antelope.type.v1.TransactionEvent.Added.transaction:type_name -> sf.antelope.type.v1.SignedTransaction
	33,  // 122: sf.antelope.type.v1.TransactionEvent.Added.public_keys:type_name -> sf.antelope.type.v1.PublicKeys
	38,  // 123: sf.antelope.type.v1.TransactionEvent.Executed.trace:type_name -> sf.antelope.type.v1.TransactionTrace
	31,  // 124: sf.antelope.type.v1.TransactionEvent.Executed.blockHeader:type_name -> sf.antelope.type.v1.BlockHeader
	53,  // 125: sf.antelope.type.v1.TransactionEvent.DtrxScheduled.created_by:type_name -> sf.antelope.type.v1.ExtDTrxOp
	35,  // 126: sf.antelope.type.v1.TransactionEvent.DtrxScheduled.transaction:type_name -> sf.antelope.type.v1.SignedTransaction
	53,  // 127: sf.antelope.type.v1.TransactionEvent.DtrxCanceled.canceled_by:type_name -> sf.antelope.type.v1.ExtDTrxOp
	86,  // 128: sf.antelope.type.v1.Exception.LogMessage.context:type_name -> sf.antelope.type.v1.Exception.LogContext
	87,  // 129: sf.antelope.type.v1.Exception.LogContext.timestamp:type_name -> google.protobuf.Timestamp
	86,  // 130: sf.antelope.type.v1.Exception.LogContext.context:type_name -> sf.antelope.type.v1.Exception.LogContext
	131, // [131:131] is the sub-list for method output_type
	131, // [131:131] is the sub-list for method input_type
	131, // [131:131] is the sub-list for extension type_name
	131, // [131:131] is the sub-list for extension extendee
	0,   // [0:131] is the sub-list for field type_name
}

func init() { file_sf_antelope_type_v1_type_proto_init() }
func file_sf_antelope_type_v1_type_proto_init() {
	if File_sf_antelope_type_v1_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_antelope_type_v1_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionTraces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTraces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBOps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockWithRefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivatedProtocolFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingProducerSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerAuthoritySchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSigningAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSigningAuthorityV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRootMerkle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerToLastProduced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProducerToLastImpliedIRB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionLifecycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReceiptHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRAMDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrxOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RAMOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RAMCorrectionOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DTrxOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtDTrxOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreationFlatNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionLevelWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlimitOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlimitState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlimitAccountLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlimitAccountUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageAccumulator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticLimitParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exception); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectiveRestrictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCreationRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderOnlyBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionTraceWithBlockRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEvent_AddedInternally); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEvent_Added); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEvent_Executed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEvent_DtrxScheduled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEvent_DtrxCanceled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exception_LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_antelope_type_v1_type_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exception_LogContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_antelope_type_v1_type_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*BlockSigningAuthority_V0)(nil),
	}
	file_sf_antelope_type_v1_type_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*TransactionEvent_InternalAddition)(nil),
		(*TransactionEvent_Addition)(nil),
		(*TransactionEvent_Execution)(nil),
		(*TransactionEvent_DtrxScheduling)(nil),
		(*TransactionEvent_DtrxCancellation)(nil),
	}
	file_sf_antelope_type_v1_type_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*RlimitOp_State)(nil),
		(*RlimitOp_Config)(nil),
		(*RlimitOp_AccountLimits)(nil),
		(*RlimitOp_AccountUsage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_antelope_type_v1_type_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_antelope_type_v1_type_proto_goTypes,
		DependencyIndexes: file_sf_antelope_type_v1_type_proto_depIdxs,
		EnumInfos:         file_sf_antelope_type_v1_type_proto_enumTypes,
		MessageInfos:      file_sf_antelope_type_v1_type_proto_msgTypes,
	}.Build()
	File_sf_antelope_type_v1_type_proto = out.File
	file_sf_antelope_type_v1_type_proto_rawDesc = nil
	file_sf_antelope_type_v1_type_proto_goTypes = nil
	file_sf_antelope_type_v1_type_proto_depIdxs = nil
}
